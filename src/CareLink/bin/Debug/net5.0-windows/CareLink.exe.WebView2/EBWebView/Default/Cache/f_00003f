/**
 * Uses Simple Inheritance by John Resig, http://ejohn.org/blog/simple-javascript-inheritance/
 */
var ROLE_MAPPER = {
    CP: 'carepartner',
    PATIENT: 'patient'
};
var Bluebird = Promise.noConflict();
var patientUsername = window.frameElement.getAttribute('data-patient');
var status = window.frameElement.getAttribute('data-status');
var patientRole = ROLE_MAPPER[window.frameElement.getAttribute('data-role')];
var countrySettings = JSON.parse(window.frameElement.getAttribute('data-settings'));
var language = window.frameElement.getAttribute('data-language');
var isInfoUnavailable = false;
var flagAlarm = false;
/*Change implemented by Zimetrics*/
/*FG20-FSG10-FR10-TR10-SS1 - Declaring pump banner and shield variables as global*/
var stopPumpBanner = null;
var stopShieldBlinking = null;
var activeInsulin25 = false;
var activeInsulin75 = false;
$('span[text]').each(function () {
    this.outerHTML = this.res($(this).attr('text'));
});
function isLandscape() {
    return (window.orientation === 90 || window.orientation === -90);
}
function readCookie(name) {
    var nameEQ = name + '=';
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) {
            return c.substring(nameEQ.length, c.length);
        }
    }
    return null;
}
var CPM = Class.extend(
/** @lends CPM# */ {
    /**
     * Constructor. Saves the global reference to class instance as $.cpmApp.
     * @class CPM all-in-one application class and its internal utils.
     * @constructs
     */
    init: function () {
        $.cpmApp = this;
    },
    /**
     * Initialize the current active page by localizing resources. Pages have these ids:
     * #page-home, #page-status, #page-value, #page-error
     * Called when user is shown the first page and whenever user changes a page
     **/
    initAppScreen: function () {
        var url = '../i18n/' + language + '.json';
        var urlMapping = 'mapping.json';
        var self = this;
        this.get(url).then(function (translations) {
            self.localizeResources(translations);
            // if we no data hasn't been obtained get that else update the current page
            if (self.isLastUpdateStale()) {
                self.startDataUpdate();
            }
            else {
                self.updateDisplay();
            }
            // check if the init has already occurred, if so return
            if (self.global.bItinitialized) {
                return;
            }
            self.initHomeScreen(); // home screen needs one time inits
            $('.link-debug').on('click', self, self.showDebug);
            //start the update loop after the init is complete
            setInterval(self.updateDataIfNeeded, 1000);
            // set the app init flag
            self.global.bItinitialized = true;
        });
        this.get(urlMapping).then(function (mapFaultIDs) {
            self.localizeMappingResources(mapFaultIDs);
            // if we no data hasn't been obtained get that else update the current page
            if (self.isLastUpdateStale()) {
                self.startDataUpdate();
            }
            else {
                self.updateDisplay();
            }
            // check if the init has already occurred, if so return
            if (self.global.bItinitialized) {
                return;
            }
            self.initHomeScreen(); // home screen needs one time inits
            $('.link-debug').on('click', self, self.showDebug);
            //start the update loop after the init is complete
            setInterval(self.updateDataIfNeeded, 1000);
            // set the app init flag
            self.global.bItinitialized = true;
        });
    },
    get: function (url) {
        return new Bluebird(function (succeed, fail) {
            var request = new XMLHttpRequest();
            request.open("GET", url, true);
            request.addEventListener("load", function () {
                if (request.status < 400) {
                    succeed(JSON.parse(request.response));
                }
                else
                    fail(new Error("Request failed: " + request.statusText));
            });
            request.addEventListener("error", function () {
                fail(new Error("Network error"));
            });
            request.send();
        });
    },
    /**
     * Check to see if we need to load current data
     **/
    isLastUpdateStale: function () {
        if (!$.cpmAppJsonData
            || $.lastUpdateAttemptTimeMillis === undefined
            || $.lastUpdateAttemptTimeMillis == "NaN") {
            return true;
        }
        var currMillis = (new Date()).getTime();
        var timeSinceLastMonitorUpdate = currMillis - $.lastUpdateAttemptTimeMillis;
        if ($.cpmApp.global.updateIntervalAligned === false) {
            // server gets new data every five mins - time since server receieved the last message +  30 secs wiggle room
            var nextDataExpectedAtServerInMills = ($.cpmApp.global.oneMinute * 5) - $.cpmApp.parsedData.timeSinceServerReceivedLastMessage + ($.cpmApp.global.oneMinute / 2);
            if (timeSinceLastMonitorUpdate >= nextDataExpectedAtServerInMills) {
                $.cpmApp.global.updateIntervalAligned = true; // once aligned we fire update every 5 mins
                return true;
            }
            else if ($.cpmApp.parsedData.timeSinceServerReceivedLastMessage < $.cpmApp.global.oneMinute) {
                $.cpmApp.global.updateIntervalAligned = true; // one min alignment is acceptable
            }
        }
        return timeSinceLastMonitorUpdate >= $.cpmApp.global.iUpdateInterval || false;
    },
    /**
     * Update our data if we need to
     **/
    updateDataIfNeeded: function () {
        if ($.cpmApp.isLastUpdateStale()) {
            $.cpmApp.startUpdateByInterval();
        }
    },
    /**
     * Add event handlers for Home screen controls and for window resize.
     * Called only once on application start-up.
     */
    initHomeScreen: function () {
        // Detect whether device supports orientation change event, otherwise fall back to the resize event.
        var supportsOrientationChange = 'onorientationchange' in window, orientationEvent = supportsOrientationChange ? 'orientationchange' : 'resize';
        window.addEventListener(orientationEvent, this.fixIOSOrientation, false);
        this.fixIOSOrientation();
        $('.nav-time-range').on('click', 'li a', this, this.onTimeRangeSelected);
        //var isNGP = this.parsedData.deviceFamily == "NGP";
        //alert(this.parsedData);
        //if(isNGP){
        $('.trend-and-value, .device-status, .bg-right-icon, .value-details-icon').on('click', this, this.showTimeInRange);
        //}else{
        //$('.trend-and-value, .device-status, .bg-right-icon, .value-details-icon').on('click', this, this.showValue);
        //}
        $('.value-details2').on('click', this, this.showTimeInRange);
        //$('.value-details').on('click', this, this.showValue);
        $('.value-details').on('click', this, this.showTimeInRange);
        $('.alarms').on('click', this, this.showTimeInRange);
        this.global.oSelectedRangeButton = $('.nav-time-range .ui-selected');
        $(window).resize(this, this.onWindowResize);
    },
    fixIOSOrientation: function () {
        setTimeout($.cpmApp.debouncedFixIOSOrientation, 300);
    },
    debouncedFixIOSOrientation: function () {
        var isIOSLandscape = $.isIOSLandscape = false, uagent = navigator.userAgent.toLowerCase();
        var isIpad = $.isIpad = navigator.platform === 'iPad';
        var isIOS = $.isIOS = (uagent.search('iphone') > -1) || (uagent.search('ipod') > -1) || (uagent.search('ipad') > -1) || isIpad;
        if (isIOS) {
            switch (window.orientation) {
                case 0:
                    // height = 416;
                    // width = 320;
                    break;
                case 90:
                case -90:
                    // height = 268;
                    // width = 480;
                    isIOSLandscape = $.isIOSLandscape = true; /* && screen.width == 320 && screen.height == 568*/
                    break;
            }
        }
        ;
        $('html').toggleClass('landscape-ios7', isIOSLandscape);
        $.cpmApp.fixPageLayout();
        $.cpmApp.updateChart($.cpmApp);
    },
    /**
     * Adjust page layout.
     * - Align page vertically by adjusting the heights.
     * - Set content height to push down the elements going after it.
     * - Set chart element height.
     * - Set trend value and alarm elements heights.
     */
    fixPageLayout: function () {
        //return;
        var fixedWidth = $.cpmApp.forcedWidth || $(window).width(), fixedHeight = $.cpmApp.forcedHeight || $(window).height(), viewWidth = this.global.screenWidth = fixedWidth, viewHeight = this.global.screenHeight = fixedHeight, clientHeight = fixedHeight || document.documentElement.clientHeight, activePageId = $('.ui-page-active').attr('id'), smartphonesHeightOffset = 0, chartHeightOffset = 0, trendHeight = 0, alarmsHeight = 0, chartHeight = 1, $trend = $('.trend'), $alarms = $('.alarms'), $chartWrapper = $('#home-chart-wrapper'), $chartElement = $('#bg-diagram'), $uiContent = $('#page-home .ui-content'), timerangeHeight = $('#page-home .nav-time-range li').height(), statusHeight = $('#page-home .status').height(), iOSL = $.isIOSLandscape, isIOS = $.isIOS, isIpad = $.isIpad;
        var pumpBannerState = $('#pumpBannerState');
        var pumpBannerStateMobile = $('#pumpBannerStateMobile');
        if (iOSL /* viewWidth < 768 && viewHeight > 319 && viewHeight < 767 */) {
            smartphonesHeightOffset = 30;
            $('#disabledTimeInRange').css({ 'width': '100%' });
            $('#page-timeinrange').css({ 'height': '531px' });
            $('#notEnoughData').css({ 'position': 'relative', 'margin-left': '38%', 'margin-top': '-5%' });
            $("#page-timeinrange div[data-role='content']").css({ 'height': clientHeight - 140 });
            $('#unitsLabelUpdated').css({ 'right': '20px' });
        }
        else {
            if (isIOS) {
                $('#disabledTimeInRange').css({ 'width': '100%' });
                $('#page-timeinrange').css({ 'height': '531px' });
                $('#notEnoughData').css({ 'position': 'relative', 'margin-left': '25%', 'margin-top': '-10%' });
                $('#alarmHeight').css({ 'height': '100px', 'width': '100%' });
                $("#page-timeinrange div[data-role='content']").css({ 'height': clientHeight - 140 });
                $('#unitsLabelUpdated').css({ 'right': '-10px' });
            }
            else if ((/Android|webOS|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                if (isLandscape()) {
                    $('#notEnoughData').css({ 'position': 'relative', 'margin-left': '38%', 'margin-top': '-5%' });
                    $("#page-timeinrange div[data-role='content']").css({ 'height': clientHeight - 170 });
                }
                else {
                    $('#notEnoughData').css({ 'position': 'relative', 'margin-left': '25%', 'margin-top': '-10%' });
                    $("#page-timeinrange div[data-role='content']").css({ 'height': clientHeight - 150 });
                }
            }
        }
        if (activePageId == 'page-home') {
            // Set Home Page content height
            $uiContent.height(viewHeight);
            // Tweak for iPhone 4
            if (viewHeight == 480 && clientHeight == 460) {
                $uiContent.height(clientHeight);
            }
            // Portrait mobile layout: adjust Trend and Alarms height
            if ($trend.is(':visible') && $trend.css('float') != 'right') {
                trendHeight = $trend.height();
                alarmsHeight = $alarms.height();
                chartHeightOffset = 0;
            }
            // Landscape Desktop / iPad layout: adjust Trend height
            if ($trend.is(':visible') && $trend.css('float') == 'right') {
                chartHeightOffset = 15;
            }
            chartHeight = Math.round(viewHeight - statusHeight - trendHeight - alarmsHeight - timerangeHeight);
            // FIXME
            // Set adjusted Home page chart wrapper height
            $chartWrapper.height(Math.max(1, chartHeight + 1));
            $chartElement.height(Math.max(1, $chartWrapper.height() - chartHeightOffset - timerangeHeight)); // smartphonesHeightOffset
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                $("#bg-diagram").css({ "height": "150px" });
                if (isLandscape()) {
                    $("#home-chart-wrapper").css({ "height": "200px" });
                }
                else {
                    $("#home-chart-wrapper").css({ "height": "300px" });
                }
            }
        }
    },
    /**
     * Display the Blood Glucose value page in response to touching/clicking the value label.
     * @param {Object} [event] Event object
     */
    showValue: function (event) {
        $.mobile.changePage($('#page-value'), {
            transition: 'none' // TODO Enable for iPhone, flip
        });
    },
    /*Change implemented by Zimetrics*/
    /*FG20-FSG10-FR10-TR10-SS1 - Called to display time in range as per isInfoUnavailable variable value*/
    showTimeInRange: function (event) {
        if (isInfoUnavailable) {
            $('#timeInRange').css({ 'display': 'none' });
            $('#disabledTimeInRange').css({ 'display': 'block' });
        }
        else {
            $('#timeInRange').css({ 'display': 'block' });
            $('#disabledTimeInRange').css({ 'display': 'none' });
        }
        $.mobile.changePage($('#page-timeinrange'), {
            transition: 'none' // TODO Enable for iPhone, flip
        });
    },
    /**
     * Periodically called for initializing the data and display update process.
     */
    startUpdateByInterval: function () {
        $.cpmApp.startDataUpdate();
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Pump Banner and Status Therapy icons are hidden as per isInfoUnavailable*/
        if (isInfoUnavailable) {
            $('#autoModeActive').css({ 'display': 'none' });
            $('#pumpBannerState').css({ 'display': 'none' });
            $('#pumpBannerStateMobile').css({ 'display': 'none' });
            $('#bgtrendmain').css({ 'display': 'none' });
        }
    },
    /**
     * Reset the display state and load last 24 hours JSON data
     **/
    startDataUpdate: function () {
        this.beforeDisplayUpdate();
        this.loadJsonData(this);
    },
    /**
     * Redraw the Blood Glucose diagram using currently selected time range.
     * Don't redraw if screen width is less than 320px (for iPhone 5: 640 / 2 = 320).
     * @param {Object} cpmApp Reference to the application instance.
     */
    updateChart: function (cpmApp) {
        if ($('.ui-page-active').attr('id') == 'page-home' && $(window).width() >= 320) {
            cpmApp.drawChart();
        }
    },
    /**
     * Update the chart for given hours range using loaded and parsed last 24 hours JSON data.
     * Draws Blood Glucose curved line and two steppy limits for the limit levels for it (low and high).
     * Shows time value on X axis and Blood Glucose level on Y axis.
     * @param {Object} chartContainer HTML element used as chart chartContainer.
     * @param {Number} hours Time range, possible values are 3, 6, 12 and 24
     */
    drawChart: function () {
        var self = this;
        var chartContainer = document.getElementById('bg-diagram');
        var hours = self.global.iHoursSelected;
        var oData = self.getSensorValuesForNHours(hours);
        var limitLineWith = 2;
        self.global.prevChartTime = new Date().getTime();
        if (!oData) {
            return;
        }
        var timeMark = new Image();
        var foodMark = new Image();
        var exerciseMark = new Image();
        var bgMark = new Image();
        var calibrationMark = new Image();
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - time change event marker image declaration*/
        var clockMark = new Image();
        var insulinMark = new Image();
        var otherMark = new Image();
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Low Glucose Suspended event marker image declaration*/
        var shade = new Image();
        // Time Change and event markers implementation
        var timeChanges = {
            data: oData.timeChanges,
            markers: {
                show: true,
                position: 'ct',
                labelFormatter: function (data) {
                    return (data.y > 0) ? timeMark : '';
                }
            },
            yaxis: 2
        };
        // Event markers implementation
        // Create the object that Flotr consumes
        var eventMarkers = {
            data: this.parsedData.eventMarkers,
            markers: {
                show: true,
                position: 'ct',
                labelFormatter: function (data2) {
                    var idx = data2.index;
                    var marker = data2.data[idx];
                    switch (marker.type) {
                        case 'MEAL': return foodMark;
                        case 'EXERCISE': return exerciseMark;
                        case 'INSULIN': return insulinMark;
                        case 'BG_READING': return bgMark;
                        /*Change implemented by Zimetrics*/
                        /*FG20-FSG10-FR10-TR10-SS1 - time change event marker image declaration*/
                        case 'TIME_CHANGE': return clockMark;
                        case 'CALIBRATION': return calibrationMark;
                        /*case 'LOW_GLUCOSE_SUSPENDED': return shade;*/
                        /*case 'OTHER':
                            return otherMark;*/
                        default: return '';
                    }
                }
            }
        };
        // Set the number of X axis ticks dependent on screen resolution
        var xAxisTicks = 15;
        if (self.global.screenWidth < 569) {
            xAxisTicks = 10;
        }
        else if (self.global.screenWidth < 640) {
            xAxisTicks = 15;
        }
        var sensorData = oData.values, limitsDataBottom = oData.limitsBottom, limitsDataTop = oData.limitsTop, 
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Low Glucose Suspended event marker variable declaration*/
        limitsDataShade = oData.limitsShade, bottomLimits = {
            data: limitsDataBottom,
            color: '#FF0047',
            lines: {
                lineWidth: limitLineWith
            },
            yaxis: 2
        }, topLimits = {
            data: limitsDataTop,
            color: '#FF8000',
            lines: {
                lineWidth: limitLineWith,
                show: true
            },
            yaxis: 2
        }, topLimitsShade = {
            data: limitsDataShade,
            color: '#FFA500',
            lines: {
                lineWidth: 0,
                show: true,
                fillColor: ['#FFA500', '#000'],
                fill: true,
                fillOpacity: 0.5
            },
            yaxis: 2
        }, sensor = {
            data: sensorData,
            color: '#00FFFF',
            lines: {
                lineWidth: 4,
                show: true,
            },
            points: {
                show: false
            },
            xaxis: 1
        }, 
        //gridlines for MGDL
        gridlines = [self.getBGValue(40), self.getBGValue(100), self.getBGValue(150), self.getBGValue(200), self.getBGValue(250), self.getBGValue(300), self.getBGValue(350), self.getBGValue(400)];
        //gridlines for MMOL
        if (self.parsedData.jsonBGUnits != 'MGDL') {
            gridlines = [2.2, 5, 7.5, 10, 12.5, 15, 17.5, 20, 22.2];
        }
        //make custom ticks based on time
        var timeTicks = [];
        var nextTick2Hrs = 2;
        var nextTick4Hrs = 4;
        for (var i = 0; i < Object.keys(oData.values).length; i++) {
            var myDate = oData.values[i][0];
            var minutes = myDate.getMinutes();
            var distance = minutes % 5; //how far is the point from the 5 min mark
            var alignedPoint = minutes - distance; // tick mark aligned to 5 minute (0,5,10,15.....45,50,55)
            if (oData.values.length == 37) { //3 hr window
                if ((alignedPoint) % 60 == 0 || (alignedPoint) % 30 == 0) { // set tick at 1 hr and half hr
                    myDate.setMinutes(alignedPoint, 0, 0);
                    timeTicks.push(myDate.getTime());
                }
            }
            else if (oData.values.length == 73) {
                if ((alignedPoint) % 60 == 0) {
                    myDate.setMinutes(alignedPoint, 0, 0);
                    timeTicks.push(myDate.getTime());
                }
            }
            else if (oData.values.length == 145) {
                if ((alignedPoint) % 60 == 0) {
                    if (nextTick2Hrs == 2) {
                        myDate.setMinutes(alignedPoint, 0, 0);
                        timeTicks.push(myDate.getTime());
                        nextTick2Hrs = 0;
                    }
                    nextTick2Hrs++;
                }
            }
            else if (oData.values.length == 288) {
                if ((alignedPoint) % 60 == 0) {
                    if (nextTick4Hrs == 4) {
                        myDate.setMinutes(alignedPoint, 0, 0);
                        timeTicks.push(myDate.getTime());
                        nextTick4Hrs = 0;
                    }
                    nextTick4Hrs++;
                }
            }
        }
        function runner() {
            // Wait for images to finish loading otherwise wait a little bit and try again
            if (!timeMark.complete || !foodMark.complete || !exerciseMark.complete || !otherMark.complete || !bgMark.complete || /*!shade.complete || */ !insulinMark.complete || !calibrationMark.complete || !clockMark.complete) {
                setTimeout(runner, 50);
                return;
            }
            // Use correct graph height to calc icon heights
            timeMark.height = chartElement.height() / 360 * 12;
            foodMark.height = chartElement.height() / 360 * 12;
            exerciseMark.height = chartElement.height() / 360 * 12;
            //shade.height = 374;
            /*INTDASH-2445*/
            bgMark.height = chartElement.height() / 560 * 12;
            calibrationMark.height = chartElement.height() / 560 * 12;
            /*Change implemented by Zimetrics*/
            /*FG20-FSG10-FR10-TR10-SS1 - Time Change event marker height declaration*/
            clockMark.height = chartElement.height() / 360 * 12;
            insulinMark.height = chartElement.height() / 360 * 12;
            otherMark.height = chartElement.height() / 360 * 12;
            // Draw Graph
            Flotr.draw(chartContainer, [
                bottomLimits,
                topLimits,
                sensor,
                topLimitsShade,
                eventMarkers,
                timeChanges
            ], {
                preventDefault: false,
                // This is necessary to allow page dragging by touchdrag in mobile browser
                xaxis: {
                    color: '#99C1DA',
                    mode: 'time',
                    noTicks: xAxisTicks,
                    ticks: timeTicks,
                    tickFormatter: function (x) {
                        var result = '';
                        var x = parseInt(x);
                        var myDate = new Date(x);
                        var hours = myDate.getHours();
                        var minutes = myDate.getMinutes();
                        minutes = minutes < 10 ? '0' + minutes : minutes;
                        if ($.cpmApp.parsedData.timeFormat == 'HR_24') {
                            //hours = hours < 10 ? '0' + hours : hours;
                        }
                        result = hours + ':' + minutes;
                        if ($.cpmApp.parsedData.timeFormat == 'HR_12') {
                            var ampm = hours >= 12 ? $.cpmApp.res('PM') : $.cpmApp.res('AM');
                            var hours = hours % 12;
                            hours = hours ? hours : 12; // the hour '0' should be '12'
                            if (myDate.getMinutes() > 0) {
                                result = hours + ':' + minutes + ' ' + ampm;
                            }
                            else {
                                result = hours + ' ' + ampm;
                            }
                        }
                        return result;
                    }
                },
                y2axis: {
                    color: '#99C1DA',
                    ticks: gridlines,
                    min: self.getBGValue(40),
                    max: self.getBGValue(401) /* so values at 400 don't get clipped */
                },
                yaxis: {
                    color: '#ff0000',
                    min: self.getBGValue(40),
                    max: self.getBGValue(401),
                    ticks: []
                },
                grid: {
                    color: '#181E22',
                    backgroundColor: '#000',
                    backgroundImage: null,
                    tickColor: '#181E22',
                    labelMargin: 5,
                    verticalLines: true,
                    minorVerticalLines: true,
                    horizontalLines: true,
                    minorHorizontalLines: true,
                    outlineWidth: 1,
                    outline: 'nsew' // walls of the outline to display
                }
            });
        }
        //get the chartelement to size and postion the image better
        var chartElement = $('.page-home #bg-diagram');
        // Choose the right size icon depending on the window size.
        var img_width = 1000 / $(window).width();
        timeMark.onload = runner;
        var width = 16;
        var imageSize = '';
        if (1 / img_width < 0.70) {
            width = 8;
            imageSize = '-small';
        }
        else if (1 / img_width < 1) {
            width = 12;
            imageSize = '-med';
        }
        timeMark.width = width;
        foodMark.width = width;
        exerciseMark.width = width;
        bgMark.width = width;
        calibrationMark.width = width;
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Time Change event marker icon width declaration*/
        clockMark.width = width;
        //shade.width = 50;
        insulinMark.width = width;
        otherMark.width = width;
        timeMark.height = width;
        foodMark.height = width;
        exerciseMark.height = width;
        bgMark.height = width;
        calibrationMark.height = width;
        clockMark.height = width;
        insulinMark.height = width;
        otherMark.height = width;
        timeMark.src = '/assets/dummy/connect/images/connect-time-change' + imageSize + '.png';
        foodMark.src = '/assets/dummy/connect/images/connect-marker-food' + imageSize + '.png';
        exerciseMark.src = '/assets/dummy/connect/images/connect-marker-exercise' + imageSize + '.png';
        //bgMark.src = '/assets/dummy/connect/images/connect-marker-bg'+ imageSize +'.png';
        bgMark.src = '/assets/dummy/connect/images/connect-marker-blood-drop' + imageSize + '.png';
        calibrationMark.src = '/assets/dummy/connect/images/connect-marker-blood-drop' + imageSize + '.png';
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Time Change event marker icon width declaration*/
        clockMark.src = '/assets/dummy/connect/images/connect-time-change' + imageSize + '.png';
        //shade.src = '/assets/dummy/connect/images/shade'+ imageSize +'.png';
        insulinMark.src = '/assets/dummy/connect/images/connect-marker-insulin' + imageSize + '.png';
        otherMark.src = '/assets/dummy/connect/images/connect-marker-other' + imageSize + '.png';
    },
    /**
     * Reset the status icon to show undefined state before showing the actual
     * status value loaded from last 24 hours JSON data.
     **/
    beforeDisplayUpdate: function () {
        $('.status-message-icon').removeClass('status-ok status-error-sensor status-error-meddevice status-error-app status-error-conduit status-error-app-cgm');
        $('.status-message').text($.cpmApp.res('Updating'));
        $('#appidlabel').text($.cpmApp.res('App_ID'));
        $('.mgdl').text($.cpmApp.res('MGDL'));
        $('.insulin-units').text($.cpmApp.res('InsulineUnits'));
        $('.status-message-icon').addClass('status-ok');
    },
    /**
     * Set the state of active page using loaded last 24 hours JSON data.
     * Don't update the application if the screen width is less than 320px (iPhone5 screen width: 640 / 2 = 320)
     * IF recovering from data loading error, go back to the last vewed page.
     */
    updateDisplay: function () {
        if ($(window).width() < 320) { // iPhone Screen Width
            return;
        }
        var data = this.parsedData;
        var isGM = (data.deviceFamily == 'GUARDIAN');
        var activePageId = $('.ui-page-active').attr('id');
        // Recover after error if data is fine and page before error is known
        if ($.cpmAppDataOk && $.cpmAppLastPageBeforeError != undefined) {
            $.mobile.changePage('#' + $.cpmAppLastPageBeforeError, 'none'); // TODO Enable for iPhone, 'fade'
            $.cpmAppLastPageBeforeError = undefined;
            return;
        }
        this.beforeDisplayUpdate();
        $('.status-message-icon').removeClass('status-ok');
        if (data.appStatus === "ALL_GOOD") {
            $('.status-message-icon').addClass('status-ok');
            isInfoUnavailable = false;
        }
        else if (data.appStatus === "SENSOR_BAD") {
            $('.status-message-icon').addClass('status-error-sensor');
            isInfoUnavailable = false;
        }
        else if (data.appStatus === "MEDICAL_DEVICE_BAD") {
            $('.status-message-icon').addClass('status-error-meddevice');
            isInfoUnavailable = false;
        }
        else if (data.appStatus === "CONDUIT_BAD") {
            if (isGM) {
                $('.status-message-icon').addClass('status-error-app-cgm');
                isInfoUnavailable = false;
            }
            else {
                $('.status-message-icon').addClass('status-error-app');
                isInfoUnavailable = true;
                $('#autoModeActive').css({ 'display': 'none' });
                $('#pumpBannerState').css({ 'display': 'none' });
                $('#pumpBannerStateMobile').css({ 'display': 'none' });
                $('#bgtrendmain').css({ 'display': 'none' });
            }
        }
        else if (data.pumpCommunicationState == false) {
            $('.cpm-page .status-message-icon.ui-link.status-error-app').css({ 'background-position': '0 -302px' });
        }
        else if (data.gstCommunicationState == false) {
            $('.cpm-page .status-message-icon.ui-link.status-error-app').css({ 'background-position': '0 -451px' });
        }
        switch (activePageId) {
            case 'page-home':
                this.updateHomeScreen(data);
                break;
            case 'page-status':
                this.updateStatusScreen(data);
                break;
            case 'page-value':
                this.updateValueScreen(data);
                break;
            /*Change implemented by Zimetrics*/
            /*FG20-FSG10-FR10-TR10-SS1 - Time in range screen page call*/
            case 'page-timeinrange':
                this.updateTimeInRangeScreen(data);
                break;
        }
        this.fixPageLayout();
    },
    /**
     * Set Home screen state as defined by parsed JSON data. Set User name,
     * Chart, Trend icon and value, Status icon and message, Alarm display.
     * @param {Object} data Object holding the parsed last 24 hours JSON data.
     */
    updateHomeScreen: function (data) {
        if (!data.sUpdatedDate) {
            return;
        }
        var jsonData = $.cpmAppJsonData;
        var pd = data;
        var isSensorOff = data.sensorState == "SENSOR_OFF";
        var isGM = (data.deviceFamily == 'GUARDIAN');
        var isNGP = (data.deviceFamily == 'NGP');
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - variable declaration to get json values*/
        var msgStatusMessage = pd.systemStatusMessage;
        var pumpCommunicationState = pd.pumpCommunicationState;
        var gstCommunicationState = pd.gstCommunicationState;
        var sensorDurationHours = pd.sensorHoursToChange;
        var timeToNextCalibrationHours = pd.sensorCalibrationTime;
        var resAmount = pd.pumpResAmount;
        var pumpBatteryLevel = pd.medicalDeviceBattery;
        var msgTempBasalRate = pd.tempBasalRate;
        var msgPresetTempName = pd.presetTempName;
        var msgTempBasalType = pd.tempBasalType;
        var msgTempBasalPercentage = pd.tempBasalPercentage;
        var msgBasalRate = pd.basalRate;
        var msgActiveBasalPattern = pd.activeBasalPattern;
        var pSuspendState = jsonData['medicalDeviceSuspended'];
        var tsi = jsonData['therapyAlgorithmState'];
        var autoShieldState = tsi != null && tsi != undefined ? tsi.autoModeShieldState : "";
        var pbs = jsonData['pumpBannerState'];
        var count = 0;
        if (pbs) {
            var stateType = pbs[count] && pbs[count].type;
        }
        var resLevel = pd.pumpResLevelPercent;
        var dataSensorState = data.sensorState;
        var mNumber = jsonData['pumpModelNumber'];
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Displaying App disconnected icon when pumpCommunicationState is false*/
        if (pumpCommunicationState == false) {
            $('.cpm-page .status-message-icon.ui-link.status-error-app').css({ 'background-position': '0 -302px' });
        }
        $('.username').html(data.firstname + ' <b>' + data.surname + '</b>');
        $('.status-message').html(this.res('Updated') + '<br /><b>' + data.sUpdatedTime + ' ' + data.sUpdatedDateLonger + '</b>');
        var lastValueAsNumBanner = Number(pd.lastValue);
        /*INTDASH-2661, BRDP-57*/
        if (isNGP && !(isInfoUnavailable)) {
            this.updatePumpBannerState();
            this.statusTherapyIcons();
        }
        if (msgStatusMessage == "SENSOR_OFF") {
            $('.cpm-page .status-message-icon.ui-link').html('').hide();
        }
        if (isNGP && (msgStatusMessage == "SENSOR_OFF" || isInfoUnavailable)) {
            $('#autoModeActive').css({ 'display': 'none' });
        }
        if ((mNumber == "MMT-1805" || mNumber == "MMT-1800" || mNumber == "MMT-1801" || mNumber == "MMT-1817" || mNumber == "MMT-1809" || mNumber == "MMT-1810" || mNumber == "MMT-1811" || mNumber == "MMT-1812") && (pd.sActiveInsulinAmount < 0 || (pd.sActiveInsulinAmount < 0.025 && pd.sActiveInsulinAmount != 0.0) || pd.sActiveInsulinAmount > 75)) {
            activeInsulin75 = true;
        }
        if ((mNumber == "MMT-1818" || mNumber == "MMT-1880" || mNumber == "MMT-1881" || mNumber == "MMT-1882") && (pd.sActiveInsulinAmount < 0 || (pd.sActiveInsulinAmount < 0.025 && pd.sActiveInsulinAmount != 0.0) || pd.sActiveInsulinAmount > 25)) {
            activeInsulin25 = true;
        }
        var pumpBannerState = $('#pumpBannerState');
        var len = Array.isArray(pbs) ? pbs.length : 0;
        if (isNGP && len == 0) {
            pumpBannerState.attr('style', 'display:none;');
            pumpBannerState.html('');
            if (stopPumpBanner != null) {
                clearInterval(stopPumpBanner);
            }
        }
        if (isInfoUnavailable) {
            $('.alarm-bolus-mobile.insulin-mobile').html('').hide();
            $('.insulinRateType').html('').hide();
            $('#pumpinfo #pumpinsulin').html('').hide();
        }
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Displaying BASAL values as per Web and Mobie Views*/
        var msgPresetTempNameValue = (msgPresetTempName && msgPresetTempName != null) ? this.res(msgPresetTempName) : '';
        var msgTempBasalPercentageValue = (msgTempBasalPercentage && msgTempBasalPercentage != null) ? msgTempBasalPercentage : '';
        if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
            //$('#currentInsulinPumpInfo').html('').hide();
            if (msgTempBasalType && msgTempBasalType != null) {
                if ((msgTempBasalType == "RELATIVE") && (msgTempBasalPercentage && msgTempBasalPercentage != null) && (msgTempBasalRate && msgTempBasalRate != null)) {
                    if (msgTempBasalPercentage < 0 || msgTempBasalPercentage > 200) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#00FF00;font-weight:bold;">--- % (--- ' + this.res('Nuhr') + ')<span>');
                    }
                    else if ((msgBasalRate < 0 || msgBasalRate > 35) || (msgTempBasalPercentage < 0 || msgTempBasalPercentage > 200)) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#00FF00;font-weight:bold;">--- % (--- ' + this.res('Nuhr') + ')<span>');
                    }
                    else if (msgBasalRate < 0 || msgBasalRate > 35) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#800080;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
                    }
                    else if (stateType == "TEMP_BASAL" && msgBasalRate != null && msgBasalRate > 0 && msgBasalRate <= 35) {
                        $('.insulinRateType').html('<span class="insulinRateNotNull">' + msgTempBasalPercentageValue + '%</span>' + '  ' + '<span class="insulinRateNotNull" style="color:#00FF00;font-weight:bold;">(' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + ')</span>' + '<br /><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                    else {
                        $('.insulinRateType').html('<span class="insulinRateNotNull">' + msgTempBasalPercentage + '%</span>' + '  ' + '<span class="insulinRateNotNull" style="color:#00FF00;font-weight:bold;">(' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + ')</span>' + '<br /><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                }
                else if ((msgTempBasalType == "ABSOLUTE") && (msgTempBasalRate && msgTempBasalRate != null)) {
                    if (msgTempBasalRate < 0 || msgTempBasalRate > 35) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#00FF00;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
                    }
                    else if (stateType == "TEMP_BASAL" && msgTempBasalRate != null && msgTempBasalRate > 0 && msgTempBasalRate <= 35) {
                        $('.insulinRateType').html('<span class="insulinRateNotNull" style="color:#00FF00;font-weight:bold;">' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span>' + '<br /><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                    else {
                        $('.insulinRateType').html('<span class="insulinRateNotNull">' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span><br/><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                }
                else {
                    $('.insulinRateType').html('');
                }
            }
            else {
                if (msgActiveBasalPattern != null && msgActiveBasalPattern != undefined && msgBasalRate >= 0 && msgBasalRate <= 35) {
                    $('.insulinRateType').html('<span class="insulinRateNull">' + msgBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span><br /><span class="insulinTypeNull">' + this.res(msgActiveBasalPattern) + '</span>');
                }
                else if (msgBasalRate != null && msgBasalRate >= 0 && msgBasalRate <= 35) {
                    $('.insulinRateType').html('<span class="insulinRateNull" style="color:#800080;font-weight:bold;">' + msgBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span>');
                }
                else if (msgBasalRate < 0 || msgBasalRate > 35) {
                    $('.insulinRateType').html('<span class="insulinRate" style="color:#800080;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
                }
                else {
                    $('.insulinRateType').html('');
                }
            }
            if (pSuspendState == true) {
                $('.insulinRateType').html('');
            }
            if (autoShieldState != "FEATURE_OFF") {
                $('.insulinRateType').html('');
            }
            if (stateType == "LOAD_RESERVOIR") {
                $('.insulinRateType').html('');
            }
            if (msgStatusMessage == "BLUETOOTH_OFF" || msgStatusMessage == "LOST_PUMP_SIGNAL" || msgStatusMessage == "UPDATING" || msgStatusMessage == "PUMP_NOT_PAIRED" || msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "PUMP_PAIRING_LOST") {
                $('.insulinRateType').html('<span class="insulinRate" style="color:#800080;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
            }
        }
        else {
            if (msgTempBasalType && msgTempBasalType != null) {
                if ((msgTempBasalType == "RELATIVE") && (msgTempBasalPercentage && msgTempBasalPercentage != null) && (msgTempBasalRate && msgTempBasalRate != null)) {
                    if (msgTempBasalPercentage < 0 || msgTempBasalPercentage > 200) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#00FF00;font-weight:bold;">--- % (--- ' + this.res('Nuhr') + ')<span>');
                    }
                    else if ((msgBasalRate < 0 || msgBasalRate > 35) || (msgTempBasalPercentage < 0 || msgTempBasalPercentage > 200)) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#00FF00;font-weight:bold;">--- % (--- ' + this.res('Nuhr') + ')<span>');
                    }
                    else if (msgBasalRate < 0 || msgBasalRate > 35) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#800080;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
                    }
                    else if (pbs == "TEMP_BASAL" && msgBasalRate != null && msgBasalRate > 0 && msgBasalRate <= 35) {
                        $('.insulinRateType').html('<span class="insulinRateNotNull">' + msgTempBasalPercentageValue + '%</span>' + '  ' + '<span class="insulinRateNotNull" style="color:#00FF00;font-weight:bold;">(' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + ')</span>' + '<br /><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                    else {
                        $('.insulinRateType').html('<span class="insulinRateNotNull">' + msgTempBasalPercentageValue + '%</span>' + '  ' + '<span class="insulinRateNotNull" style="color:#00FF00;font-weight:bold;">(' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + ')</span>' + '<br /><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                }
                else if ((msgTempBasalType == "ABSOLUTE") && (msgTempBasalRate && msgTempBasalRate != null)) {
                    if (msgTempBasalRate < 0 || msgTempBasalRate > 35) {
                        $('.insulinRateType').html('<span class="insulinRate" style="color:#00FF00;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
                    }
                    else if (pbs == "TEMP_BASAL" && msgTempBasalRate != null && msgTempBasalRate > 0 && msgTempBasalRate <= 35) {
                        $('<span class="insulinRateNotNull" style="color:#00FF00;font-weight:bold;">' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span>' + '<br /><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                    else {
                        $('.insulinRateType').html('<span class="insulinRateNotNull">' + msgTempBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span><br/><span class="insulinTypePreset">' + msgPresetTempNameValue + '</span>');
                    }
                }
                else {
                    $('.insulinRateType').html('');
                }
            }
            else {
                if (msgActiveBasalPattern != null && msgActiveBasalPattern != undefined && msgBasalRate > 0 && msgBasalRate <= 35) {
                    $('.insulinRateType').html('<span class="insulinRateNull">' + msgBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span><br /><span class="insulinTypeNull">' + this.res(msgActiveBasalPattern) + '</span>');
                }
                else if (msgBasalRate != null && msgBasalRate > 0 && msgBasalRate <= 35) {
                    $('.insulinRateType').html('<span class="insulinRateNull" style="color:#800080;font-weight:bold;">' + msgBasalRate.toFixed(3) + ' ' + this.res('Nuhr') + '</span>');
                }
                else if (msgBasalRate < 0 || msgBasalRate > 35) {
                    $('.insulinRateType').html('<span class="insulinRate" style="color:#800080;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
                }
                else {
                    $('.insulinRateType').html('');
                }
            }
            if (pSuspendState == true) {
                $('.insulinRateType').html('');
            }
            if (autoShieldState != "FEATURE_OFF") {
                $('.insulinRateType').html('');
            }
            if (pbs == "LOAD_RESERVOIR" || resLevel < 1) {
                $('.insulinRateType').html('');
            }
            if (msgStatusMessage == "BLUETOOTH_OFF" || msgStatusMessage == "LOST_PUMP_SIGNAL" || msgStatusMessage == "UPDATING" || msgStatusMessage == "PUMP_NOT_PAIRED" || msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "PUMP_PAIRING_LOST") {
                $('.insulinRateType').html('<span class="insulinRate" style="color:#800080;font-weight:bold;">--- ' + this.res('Nuhr') + '<span>');
            }
        }
        this.updateChart(this);
        this.updateTrendIcon(data);
        //app states take precedence over sensor states
        var visibleAppState = this.visibleAppStates[data.appStatus];
        var isVisibleAppState = (visibleAppState !== null && visibleAppState !== undefined);
        //now check for sensor states
        if (!isVisibleAppState) {
            visibleAppState = this.visibleAppStates[data.sensorState];
            isVisibleAppState = (visibleAppState !== null && visibleAppState !== undefined);
        }
        if (isVisibleAppState) {
            $('.trend').addClass('off');
            $('.trend-and-value').hide();
            $('.device-status').hide();
            if ((visibleAppState == this.visibleAppStates["ABOVE_400"] || visibleAppState == this.visibleAppStates["BELOW_40"]) &&
                (data.jsonBGUnits != 'MGDL')) {
                visibleAppState = visibleAppState + '_MMOL';
            }
            if (isGM) {
                if (visibleAppState == this.visibleAppStates["SENSOR_ERROR"]) {
                    visibleAppState = this.visibleAppStates["SENSOR_ERROR_CGM"];
                }
                else if (data.appStatus == "CONDUIT_BAD" && //some sensor states are valid even when the sensor is out of range
                    (data.sensorState == "TRANSMITTER_DISCONNECTED" || data.sensorState == "SENSOR_UNPLUGGED")) {
                    visibleAppState = this.visibleAppStates[data.sensorState];
                }
            }
            if (this.res(visibleAppState) == 'Warm up...') {
                $('.device-status').html('<div>' + this.res(visibleAppState) + '</div>').show();
            }
            else if (this.res(visibleAppState) == 'Change sensor') {
                $('.device-status').html('<div id="exclaim"></div><div style="height:20px;"></div><div>' + this.res(visibleAppState) + '</div>').show();
            }
            else {
                $('.device-status').text(this.res(visibleAppState)).show();
            }
            $('#autoModeActive').css({ 'display': 'none' });
            $('.bg-right-icon').show();
            $('.value-details').html('').hide();
            $('.value-details2').html('').hide();
            $('.value-details-icon').hide();
            //this.showShadedPortion();
            /*Change implemented by Zimetrics*/
            /*FG20-FSG10-FR10-TR10-SS1 - displaying 3 --- depending upon last SG value*/
        }
        else if (!gstCommunicationState || gstCommunicationState === true) {
            var lastValueAsNum = Number(data.lastValue);
            if ((dataSensorState == "NO_DATA_FROM_PUMP" && msgStatusMessage == "NO_ERROR_MESSAGE") || (lastValueAsNum === 0 && msgStatusMessage == "NO_ERROR_MESSAGE")
                || (data.jsonBGUnits == 'MGDL' && (lastValueAsNum < 40 || lastValueAsNum > 400) && msgStatusMessage == "NO_ERROR_MESSAGE")
                || (data.jsonBGUnits == 'MMOL_L' && (lastValueAsNum < 2.2 || lastValueAsNum > 22.2) && msgStatusMessage == "NO_ERROR_MESSAGE")) {
                $('.trend').addClass('off');
                $('.device-status').hide();
                if (data.lastSensorState == 'SG_BELOW_40_MGDL') {
                    if (this.parsedData.jsonBGUnits == 'MGDL' && !lastValueAsNum || lastValueAsNum == null || lastValueAsNum == undefined) {
                        $('.trend-and-value .sensor-value').html('<div style="color:#00FFFF;font-size:0.3em">' + this.res('SG_BELOW_40_MGDL') + '</div>').show();
                    }
                    else if (this.parsedData.jsonBGUnits == 'MMOL_L' && !lastValueAsNum || lastValueAsNum == null || lastValueAsNum == undefined) {
                        $('.trend-and-value .sensor-value').html('<div style="color:#00FFFF;font-size:0.3em">' + this.res('SG_BELOW_40_MMOLL') + '</div>').show();
                    }
                }
                else if (data.lastSensorState == 'SG_ABOVE_400_MGDL') {
                    if (this.parsedData.jsonBGUnits == 'MGDL' && !lastValueAsNum || lastValueAsNum == null || lastValueAsNum == undefined) {
                        $('.trend-and-value .sensor-value').html('<div style="color:#00FFFF;font-size:0.3em">' + this.res('SG_ABOVE_400_MGDL') + '</div>').show();
                    }
                    else if (this.parsedData.jsonBGUnits == 'MMOL_L' && !lastValueAsNum || lastValueAsNum == null || lastValueAsNum == undefined) {
                        $('.trend-and-value .sensor-value').html('<div style="color:#00FFFF;font-size:0.3em">' + this.res('SG_ABOVE_400_MMOLL') + '</div>').show();
                    }
                }
                else {
                    $('.trend-and-value .sensor-value').css('color', '#00FFFF').text('---').show();
                }
                $('.bg-right-icon').show();
                $('.value-details').html('').show();
                $('#unitsLabelUpdated .c-sprite').html('').hide();
                $('.value-details-icon').hide();
                if (data.lastSensorState != 'SG_BELOW_40_MGDL' && data.lastSensorState != 'SG_ABOVE_400_MGDL') {
                    $('.value-details2').html('<div style="color:#00FFFF" class="units-label">' + data.bgUnits + '</div>').show();
                }
                else {
                    $('.value-details2').html('');
                }
                $('.value-details').html('<div class="time-value">' + this.res('At') + ' ' + data.lastValueTime + '</div><div class="date-value">' + ' ' + data.lastValueDate + '</div><span class="pump-time-label">' + '</span>').show();
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    //$('.value-details2').css({'margin-top':'60%'});
                    //$('.alarm-bolus-mobile.insulin-mobile').html('').hide();
                    $('.value-details').css({ 'clear': 'both' });
                    $('#unitsLabelUpdated').css({ 'right': '35px' });
                    $('#bgtrendmain').css({ 'float': 'left', 'width': '100%' });
                }
                else {
                    $(document).ready(function () {
                        $(window).on('orientationchange', function (event) {
                            if (isLandscape()) {
                                $('.value-details').css({ 'top': '50px', 'padding-top': '40px' });
                            }
                            else {
                                $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                            }
                        });
                        if (isLandscape()) {
                            $('.value-details').css({ 'top': '50px', 'padding-top': '40px' });
                        }
                        else {
                            $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                        }
                    });
                    $('#unitsLabelUpdated').css({ 'right': '-140px', 'margin-top': '30px' });
                    $('.page-home .trend').css({ 'text-align': 'center' });
                    $('#pumpinfo #pumpinsulin').html('').hide();
                }
            }
            /*Change implemented by Zimetrics*/
            /*FG20-FSG10-FR10-TR10-SS1 - Displaying Active Insulin amount depending upoon systemStatusMessage value*/
            else if (msgStatusMessage == "SENSOR_OFF") {
                if (activeInsulin25) {
                    $('.trend-and-value .sensor-value').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                }
                else if (activeInsulin75) {
                    $('.trend-and-value .sensor-value').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                }
                else if (pd.sActiveInsulinAmount >= 0) {
                    if (!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:60px;margin-top:30px;"> <span>' + this.res('activeinsulin') + '</span> <br />' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + 'U' + '</div>').show();
                        $('.value-details').html('<div class="time-value">' + this.res('At') + ' ' + data.lastValueTime + '</div><div class="date-value">' + ' ' + data.lastValueDate + '</div><span class="pump-time-label">' + '</span>').show();
                        $('#unitsLabelUpdated').html('').hide();
                        $('#pumpinsulin').html('').hide();
                        $('.alarm-bolus-mobile.insulin-mobile').html('').hide();
                    }
                    else {
                        $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:60px;margin-top:30px;margin-left:30px;"> <span>' + this.res('activeinsulin') + '</span> <br />' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + 'U' + '</div>').show();
                        $('.value-details').html('<div class="time-value">' + this.res('At') + ' ' + data.lastValueTime + '</div><div class="date-value">' + ' ' + data.lastValueDate + '</div><span class="pump-time-label">' + '</span>').show();
                        $('#unitsLabelUpdated').html('').hide();
                        $('#pumpinsulin').html('').hide();
                        $('.alarm-bolus-mobile.insulin-mobile').html('').hide();
                    }
                }
            }
            else if (msgStatusMessage != "NO_ERROR_MESSAGE" && msgStatusMessage != "SENSOR_OFF") {
                if (msgStatusMessage == "CALIBRATION_REQUIRED") {
                    $('.device-status').html('').hide();
                    $('#autoModeActive').css({ 'display': 'none' });
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:30px;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res('Nstatus.calibration.required') + '</div>' + '</div>').show();
                    }
                    else {
                        $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;position:relative;left:-5px;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res('Nstatus.calibration.required') + '</div>' + '</div>').show();
                    }
                }
                else {
                    $('.device-status').html('').hide();
                    $('#autoModeActive').css({ 'display': 'none' });
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        if (msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "UPDATING") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:30px;"><div id="circular"></div><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MGDL' && msgStatusMessage == "SG_ABOVE_400_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res('SG_ABOVE_400_MGDL') + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MGDL' && msgStatusMessage == "SG_BELOW_40_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res('SG_BELOW_40_MGDL') + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MMOL_L' && msgStatusMessage == "SG_ABOVE_400_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;">><div style="margin-top:20px;">' + this.res('SG_ABOVE_400_MMOLL') + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MMOL_L' && msgStatusMessage == "SG_BELOW_40_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;">><div style="margin-top:20px;">' + this.res('SG_BELOW_40_MMOLL') + '</div>' + '</div>').show();
                        }
                        else if (msgStatusMessage == "WAIT_TO_CALIBRATE" || msgStatusMessage == "CALIBRATING" || msgStatusMessage == "WARM_UP" || msgStatusMessage == "SEARCHING_FOR_SENSOR_SIGNAL" || msgStatusMessage == "SENSOR_DISCONNECTED" || msgStatusMessage == "DO_NOT_CALIBRATE" || msgStatusMessage == "SG_BELOW_40_MGDL" || msgStatusMessage == "SG_ABOVE_400_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                        else {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:30px;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                    }
                    else {
                        $('.device-status').html('').hide();
                        $('#autoModeActive').css({ 'display': 'none' });
                        if (msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "UPDATING") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;position:relative;"><div id="circular"></div><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MGDL' && msgStatusMessage == "SG_ABOVE_400_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res('SG_ABOVE_400_MGDL') + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MGDL' && msgStatusMessage == "SG_BELOW_40_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res('SG_BELOW_40_MGDL') + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MMOL_L' && msgStatusMessage == "SG_ABOVE_400_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res('SG_ABOVE_400_MMOLL') + '</div>' + '</div>').show();
                        }
                        else if (data.jsonBGUnits == 'MMOL_L' && msgStatusMessage == "SG_BELOW_40_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res('SG_BELOW_40_MMOLL') + '</div>' + '</div>').show();
                        }
                        else if (msgStatusMessage == "WAIT_TO_CALIBRATE" || msgStatusMessage == "CALIBRATING" || msgStatusMessage == "WARM_UP" || msgStatusMessage == "SEARCHING_FOR_SENSOR_SIGNAL" || msgStatusMessage == "SENSOR_DISCONNECTED" || msgStatusMessage == "DO_NOT_CALIBRATE" || msgStatusMessage == "SG_BELOW_40_MGDL" || msgStatusMessage == "SG_ABOVE_400_MGDL") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;margin-left:0px;"><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                        else {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;color:#FFFFFF;height:100px;margin-top:30px;position:relative;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                    }
                }
                $('.value-details').html('').hide();
                $('#unitsLabelUpdated').html('').hide();
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                    if (msgStatusMessage == "BLUETOOTH_OFF" || msgStatusMessage == "UPDATING" || msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "PUMP_PAIRING_LOST" || msgStatusMessage == "LOST_PUMP_SIGNAL" || msgStatusMessage == "PUMP_NOT_PAIRED") {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                    else if (activeInsulin25) {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                    else if (activeInsulin75) {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                    else {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                }
                else {
                    if (msgStatusMessage == "BLUETOOTH_OFF" || msgStatusMessage == "UPDATING" || msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "PUMP_PAIRING_LOST" || msgStatusMessage == "LOST_PUMP_SIGNAL" || msgStatusMessage == "PUMP_NOT_PAIRED") {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                    else if (activeInsulin25) {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                    else if (activeInsulin75) {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                    else {
                        $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                        $('#pumpinfo #pumpinsulin').html('').hide();
                    }
                    //$('.alarm-bolus-mobile.insulin-mobile').html('').hide();
                }
            }
            else {
                var tsi = jsonData['therapyAlgorithmState'];
                var autoShieldState = tsi != null && tsi != undefined ? tsi.autoModeShieldState : "";
                $('.trend').removeClass('off');
                $('.device-status, .bg-right-icon').hide();
                if (autoShieldState == "AUTO_BASAL" || autoShieldState == "SAFE_BASAL") {
                    $('.trend-and-value .sensor-value').css('color', '#FFFFFF').text(data.lastValue).show();
                    $('.value-details2').html('<div style=color:#FFFFFF' + this.getUnitsColor() + ' class="units-label">' + data.bgUnits + '</div>').show();
                }
                else {
                    $('.trend-and-value .sensor-value').css('color', '#00FFFF').text(data.lastValue).show();
                    $('.value-details2').html('<div style=color:#00FFFF' + this.getUnitsColor() + ' class="units-label">' + data.bgUnits + '</div>').show();
                }
                $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
                $('.value-details').html('<div class="time-value">' + this.res('At') + ' ' + data.lastValueTime + '</div><div class="date-value">' + ' ' + data.lastValueDate + '</div><span class="pump-time-label">' + '</span>').show();
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    //var autoModeActive = $('#autoModeActive');
                    //var display = autoModeActive.css('display');
                    //if(display == 'block'){
                    //$('.value-details').css({'margin-top':'30%'});
                    //}else{
                    $('.value-details').css({ 'margin-top': '10%' });
                    //}
                    //$('.alarm-bolus-mobile.insulin-mobile').html('').hide();
                }
                else {
                    $(document).ready(function () {
                        $(window).on('orientationchange', function (event) {
                            if (isLandscape()) {
                                $('.value-details').css({ 'float': 'left', 'top': '50px', 'padding-top': '40px' });
                            }
                            else {
                                $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                            }
                        });
                        if (isLandscape()) {
                            $('.value-details').css({ 'top': '50px', 'padding-top': '40px' });
                        }
                        else {
                            $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                        }
                    });
                    $('#pumpinfo #pumpinsulin').html('').hide();
                }
                $('.value-details-icon').show();
                var limitsTop = data.sensorValues.limitsTop.reverse();
                var limitsBottom = data.sensorValues.limitsBottom.reverse();
                var lastLimitBottom = limitsBottom[limitsBottom.length - 1][1];
                var lastLimitTop = limitsTop[limitsTop.length - 1][1];
                var noLimits = (lastLimitTop === null && lastLimitBottom === null) || (lastLimitTop == 0 && lastLimitBottom == 0);
                var isLimitTopSet = (lastLimitTop !== null && Number(lastLimitTop) !== 0);
                var isLimitBottomSet = (lastLimitBottom !== null && Number(lastLimitBottom) !== 0);
                if (isNGP) {
                    this.statusTherapyIconsColor();
                }
                else {
                    if (noLimits) {
                        // no limits, special case
                        $('.trend-and-value .sensor-value').css('color', '#00FFFF');
                        $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
                    }
                    else if (isLimitTopSet && lastValueAsNum >= Number(lastLimitTop)) {
                        // sensor value over limit
                        $('.trend-and-value .sensor-value').css('color', '#FF8000');
                        $('.trend-and-value .trend-icon').css('background-color', '#FF8000');
                    }
                    else if (isLimitBottomSet && lastValueAsNum <= Number(lastLimitBottom)) {
                        //sensor value below limit
                        $('.trend-and-value .sensor-value').css('color', '#FF0047');
                        $('.trend-and-value .trend-icon').css('background-color', '#FF0047');
                    }
                    else {
                        //sensor value in range
                        $('.trend-and-value .sensor-value').css('color', '#00FFFF');
                        $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
                    }
                }
            }
            $('.trend-and-value').show();
        }
        else {
            $('.trend').addClass('off');
            $('.trend-and-value > :not(.sensor-value, .trend-icon)').hide();
            $('.trend-and-value .sensor-value').text('--').show();
            $('.bg-right-icon').show();
            $('.value-details').html('').hide();
            $('.value-details2').html('').hide();
            $('.value-details-icon').hide();
            $('.trend-and-value').show();
        }
        this.updateAlarmsDisplay(data);
        this.localize('.link-3hr', 'Hr3');
        this.localize('.link-6hr', 'Hr6');
        this.localize('.link-12hr', 'Hr12');
        this.localize('.link-24hr', 'Hr24');
    },
    /**
     * These sensor states are supposed to show up in the display.
     * Keys map to data sensor states, values map to resource string keys.
     */
    visibleAppStates: {
        "INVALID": "INVALID",
        "METER_BG": "METER_BG",
        "WEAK_SIGNAL": "WEAK_SIGNAL",
        "CAL_ERROR": "CAL_ERROR",
        "WARM_UP": "WARM_UP",
        "SENSOR_END": "SENSOR_END",
        "BELOW_40": "BELOW_40",
        "ABOVE_400": "ABOVE_400",
        "SENSOR_ERROR": "SENSOR_ERROR",
        "CHANGE_SENSOR": "CHANGE_SENSOR",
        "LOST_SENSOR": "LOST_SENSOR",
        "SENSOR_OFF": "SENSOR_OFF",
        "MEDICAL_DEVICE_BAD": "MEDICAL_DEVICE_BAD",
        "CONDUIT_BAD": "CONDUIT_BAD",
        "SENSOR_ERROR_CGM": "SENSOR_ERROR_CGM",
        "SENSOR_WARM_UP": "WARM_UP",
        "SENSOR_CALIBRATION_REJECTED": "WAIT_TO_CALIBRATE",
        "SENSOR_CALIBRATION_PENDING": "CALIBRATING",
        "TRANSMITTER_SEARCHING": "SENSOR_SEARCHING",
        "TRANSMITTER_BATTERY_DEPLETED": "TRANS_BATT_EMPTY",
        "SENSOR_FAILED": "CHANGE_SENSOR",
        "SENSOR_EXPIRED": "SENSOR_END_CGM",
        "TRANSMITTER_DISCONNECTED": "LOST_SENSOR_CGM",
        "SENSOR_CALIBRATION_REQUIRED": "CALIBRATE_NOW",
        "SENSOR_UNPLUGGED": "CHECK_CONN",
        "TRANSMITTER_ERROR": "TRANS_ERROR",
        "TRANSMITTER_RE_PAIR": "NO_TRANS_PAIRED",
        "TRANSMITTER_UPDATING": "TRANSMITTER_UPDATING",
        "SENSOR_CONFIGURATION_REQUIRED": "SENSOR_CONFIGURATION_REQUIRED",
        "SENSOR_GLUCOSE_ABOVE_400": "ABOVE_400",
        "SENSOR_GLUCOSE_BELOW_40": "BELOW_40"
    },
    updateAlarmsDisplay: function (data) {
        var alarmsElement = $('.alarms'), pd = data, isNGP = (data.deviceFamily == 'NGP'), isGM = (data.deviceFamily == 'GUARDIAN'), valueScreenLastBolusTime = "";
        var jsonData = $.cpmAppJsonData;
        var mNumber = jsonData['pumpModelNumber'];
        alarmsElement.removeClass('current');
        alarmsElement.toggleClass('extended', true); // always extended
        this.toggleSuspendedBadge(false);
        var msgStatusMessage = pd.systemStatusMessage;
        /* Set Extended display: Suspended status, Last Bolus and Active Insulin */
        /* Commented for BLE-NGP */
        /*if ($('.ui-page-active').attr('id') === 'page-value') { // time stamp to be shown only in SG only screen
            valueScreenLastBolusTime = this.res('At') +' <span>'+ data.sLastBolusSts +'</span>';
        }*/
        if ((mNumber == "MMT-1805" || mNumber == "MMT-1800" || mNumber == "MMT-1801" || mNumber == "MMT-1817" || mNumber == "MMT-1809" || mNumber == "MMT-1810" || mNumber == "MMT-1811" || mNumber == "MMT-1812") && (pd.sActiveInsulinAmount < 0 || (pd.sActiveInsulinAmount < 0.025 && pd.sActiveInsulinAmount != 0.0) || pd.sActiveInsulinAmount > 75)) {
            activeInsulin75 = true;
        }
        if ((mNumber == "MMT-1818" || mNumber == "MMT-1880" || mNumber == "MMT-1881" || mNumber == "MMT-1882") && (pd.sActiveInsulinAmount < 0 || (pd.sActiveInsulinAmount < 0.025 && pd.sActiveInsulinAmount != 0.0) || pd.sActiveInsulinAmount > 25)) {
            activeInsulin25 = true;
        }
        /* Commented for BLE-NGP */
        $('.alarm-bolus.bolus').hide();
        /*if (isNGP) { // last bolus and suspend are NGP only. show them if possible.
          this.toggleSuspendedBadge(pd.pumpSuspended);
          if (data.lastBolusTS !== 0){ // Last bolus is unavailable
              $('.alarm-bolus.bolus').html( '<span class="label">' + this.res('lastbolus') + '</span><span class="value">' + pd.sLastBolusAmount.toFixed( 2 ) + ' ' + this.res('InsulineUnits') + '</span> ' + valueScreenLastBolusTime);
          } else {
              $('.alarm-bolus.bolus').html( '<span class="label">' + this.res('lastbolus') + '</span><span class="value">' + '--' + '</span> ');
          }
        } else { // hide unneeded elements for nonNGPs (last bolus) as they are, by default, present in the HTML
          $('.alarm-bolus.bolus').hide();
        }*/
        if (isGM) { // active insulin not necessary
            $("#pumpinsulin").hide();
            $(".alarm-bolus.insulin").hide();
        }
        //active insulin
        var labelActiveInsulin;
        var activeInsulinString;
        activeInsulinString = this.res('activeinsulin');
        labelActiveInsulin = activeInsulinString.replace(/:$/, "");
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - Displaying Active Insulin values as per Web and Mobile view*/
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
            if (activeInsulin25) {
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
            }
            else if (activeInsulin75) {
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
            }
            else if (msgStatusMessage == "BLUETOOTH_OFF" || msgStatusMessage == "UPDATING" || msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "PUMP_PAIRING_LOST" || msgStatusMessage == "LOST_PUMP_SIGNAL" || msgStatusMessage == "PUMP_NOT_PAIRED") {
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
            }
            else if (pd.sActiveInsulinAmount >= 0 && msgStatusMessage != "LOST_PUMP_SIGNAL") {
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + labelActiveInsulin + '</span>');
            }
            else { // value -1
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
            }
        }
        else {
            if (activeInsulin25) {
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
            }
            else if (activeInsulin75) {
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
            }
            else if (msgStatusMessage == "BLUETOOTH_OFF" || msgStatusMessage == "UPDATING" || msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "PUMP_PAIRING_LOST" || msgStatusMessage == "LOST_PUMP_SIGNAL" || msgStatusMessage == "PUMP_NOT_PAIRED") {
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
            }
            else if (pd.sActiveInsulinAmount >= 0 && msgStatusMessage != "LOST_PUMP_SIGNAL") {
                $('.alarm-bolus.insulin').html('<span class="label">' + this.res('activeinsulin') + '</span><span class="value">' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + this.res('InsulineUnits') + '</span>');
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + labelActiveInsulin + '</span>');
            }
            else { // value -1
                $('.alarm-bolus.insulin').html('<span class="label">' + this.res('activeinsulin') + '</span><span class="value">' + '--');
                $('.alarm-bolus-mobile.insulin-mobile').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + labelActiveInsulin + '</span>');
            }
        }
        /* End: Set Extended display: Suspended status, Last Bolus and Active Insulin */
        var alarmCodePrefix = "";
        if (isNGP) {
            alarmCodePrefix = "N";
        }
        else if (isGM) {
            alarmCodePrefix = "GM_";
        }
        var flagAlarm1 = false;
        var flagAlarm2 = false;
        var alarmText = '';
        if (data.sLastAlarmCode == "00-1" || data.sLastAlarmCode == "121") {
            $('.last-alarm-link').html('');
        }
        else {
            if (this.mappings) {
                if (!this.mappings[data.sLastAlarmCode]) {
                    flagAlarm2 = true;
                    data.sLastAlarmCode = "062";
                    flagAlarm = true;
                    alarmText = this.getAlarmByCode(alarmCodePrefix + this.mappings[data.sLastAlarmCode]);
                }
                else if (this.mappings[data.sLastAlarmCode] && (mNumber == "MMT-1809" || mNumber == "MMT-1810" || mNumber == "MMT-1818")) {
                    var fault720G = new Array("803", "806", "807", "808", "809", "810", "811", "812", "814", "815", "819", "820", "821", "822", "823", "824", "825", "827", "828", "829", "830", "831", "832", "833");
                    var faultLen = fault720G.length;
                    var i;
                    for (i = 0; i <= faultLen; i++) {
                        if (data.sLastAlarmCode == fault720G[i]) {
                            data.sLastAlarmCode = "062";
                            flagAlarm = true;
                            alarmText = this.getAlarmByCode(alarmCodePrefix + this.mappings[data.sLastAlarmCode]);
                            flagAlarm1 = true;
                        }
                    }
                    if (flagAlarm1 == false) {
                        alarmText = this.getAlarmByCode(alarmCodePrefix + this.mappings[data.sLastAlarmCode]);
                    }
                }
                else {
                    alarmText = this.getAlarmByCode(alarmCodePrefix + this.mappings[data.sLastAlarmCode]);
                }
            }
            if (data.sLastAlarmCode === 0 || (data.sLastAlarmCode == "070" || data.sLastAlarmCode == "071" || data.sLastAlarmCode == "072" || data.sLastAlarmCode == "108" || data.sLastAlarmCode == "114" || data.sLastAlarmCode == "786" || data.sLastAlarmCode == "787" || data.sLastAlarmCode == "788" || data.sLastAlarmCode == "799" || data.sLastAlarmCode == "806" || data.sLastAlarmCode == "825" || data.sLastAlarmCode == "828") || alarmText === '-1' && !$.cpmApp.global.showUnrecognizedErrors && flagAlarm2 == false) {
                $('.last-alarm-link').html('');
            }
            else if (flagAlarm2 == true) {
                if (data.bLastAlarmFlash == true) {
                    alarmsElement.addClass('current');
                    $('.last-alarm-link').html('<b class="alarm-value">' + alarmText + '</b><br />' + this.res('At') + ' <span class="nowrap">' + data.sLastAlarmTime + '</span> <span class="nowrap">' + data.sLastAlarmDate + '</span>');
                }
                else {
                    $('.last-alarm-link').html(this.res('LastAlarmAt') + ' <span class="nowrap">' + data.sLastAlarmTime + '</span> <span class="nowrap">' + data.sLastAlarmDate + '</span><br /><b class="alarm-value">' + alarmText + '</b>');
                }
            }
            else if (data.sLastAlarmCode == "062" && flagAlarm == false) {
                $('.last-alarm-link').html('');
            }
            else if (data.bLastAlarmFlash) {
                alarmsElement.addClass('current');
                $('.last-alarm-link').html('<b class="alarm-value">' + alarmText + '</b><br />' + this.res('At') + ' <span class="nowrap">' + data.sLastAlarmTime + '</span> <span class="nowrap">' + data.sLastAlarmDate + '</span>');
            }
            else {
                $('.last-alarm-link').html(this.res('LastAlarmAt') + ' <span class="nowrap">' + data.sLastAlarmTime + '</span> <span class="nowrap">' + data.sLastAlarmDate + '</span><br /><b class="alarm-value">' + alarmText + '</b>');
            }
        }
    },
    toggleSuspendedBadge: function (visible) {
        $('.alarm-suspended').html(visible ? '<span>Suspend</span>' : '').toggle(visible);
    },
    /**
     * Set Value screen state as defined by parsed JSON @data.
     * Set Username, Status icon and message, Trend icon and value, Alarm display.
     * @param {Object} data Parsed last 24 hours JSON data.
     */
    updateValueScreen: function (data) {
        var pd = data;
        var isSensorOff = data.sensorState == "SENSOR_OFF";
        var isGM = (data.deviceFamily == 'GUARDIAN');
        $('.username').html(data.firstname + ' <b>' + data.surname + '</b>');
        $('.status-message').html(this.res('Updated') + '<br /><b>' + data.sUpdatedTime + ' ' + data.sUpdatedDateLonger + '</b>');
        var msgStatusMessage = pd.systemStatusMessage;
        var dataSensorState = data.sensorState;
        var jsonData = $.cpmAppJsonData;
        var mNumber = jsonData['pumpModelNumber'];
        this.updateTrendIcon(data);
        //app states take precedence over sensor states
        var visibleAppState = this.visibleAppStates[data.appStatus];
        var isVisibleAppState = (visibleAppState !== null && visibleAppState !== undefined);
        if ((mNumber == "MMT-1805" || mNumber == "MMT-1800" || mNumber == "MMT-1801" || mNumber == "MMT-1817" || mNumber == "MMT-1809" || mNumber == "MMT-1810" || mNumber == "MMT-1811" || mNumber == "MMT-1812") && (pd.sActiveInsulinAmount < 0 || (pd.sActiveInsulinAmount < 0.025 && pd.sActiveInsulinAmount != 0.0) || pd.sActiveInsulinAmount > 75)) {
            activeInsulin75 = true;
        }
        if ((mNumber == "MMT-1818" || mNumber == "MMT-1880" || mNumber == "MMT-1881" || mNumber == "MMT-1882") && (pd.sActiveInsulinAmount < 0 || (pd.sActiveInsulinAmount < 0.025 && pd.sActiveInsulinAmount != 0.0) || pd.sActiveInsulinAmount > 25)) {
            activeInsulin25 = true;
        }
        //now check for sensor states
        if (!isVisibleAppState) {
            visibleAppState = this.visibleAppStates[data.sensorState];
            isVisibleAppState = (visibleAppState !== null && visibleAppState !== undefined);
        }
        if (isInfoUnavailable) {
            $('.alarm-bolus-mobile.insulin-mobile').html('').hide();
            $('#bgtrendmain').css({ 'display': 'none' });
        }
        if (isVisibleAppState) {
            $('.trend').addClass('off');
            $('.trend-and-value').hide();
            $('.device-status').hide();
            if ((visibleAppState == this.visibleAppStates['ABOVE_400'] || visibleAppState == this.visibleAppStates['BELOW_40']) &&
                (data.jsonBGUnits != 'MGDL')) {
                visibleAppState = visibleAppState + "_MMOL";
            }
            if (isGM) {
                if (visibleAppState == this.visibleAppStates["SENSOR_ERROR"]) {
                    visibleAppState = this.visibleAppStates["SENSOR_ERROR_CGM"];
                }
                else if (data.appStatus == "CONDUIT_BAD" && //some sensor states are valid even when the sensor is out of range
                    (data.sensorState == "TRANSMITTER_DISCONNECTED" || data.sensorState == "SENSOR_UNPLUGGED")) {
                    visibleAppState = this.visibleAppStates[data.sensorState];
                }
            }
            $('.device-status').html('<div id="exclaim"></div><div>' + this.res(visibleAppState) + '</div>').show();
            $('#autoModeActive').css({ 'display': 'none' });
            //$('.device-status').text(this.res(visibleAppState)).show();
            $('.bg-right-icon').show();
            $('.value-details').html('').hide();
            $('.value-details2').html('').hide();
        }
        else if (data.sensorInRange) {
            if ((data.lastValue === 0 && msgStatusMessage == "NO_ERROR_MESSAGE")
                || (data.jsonBGUnits == 'MGDL' && (data.lastValue < 40 || data.lastValue > 400))
                || (data.jsonBGUnits == 'MMOL_L' && (data.lastValue < 2.2 || data.lastValue > 22.2))) {
                $('.trend').addClass('off');
                $('.trend-and-value > :not(.sensor-value)').hide();
                $('.device-status').hide();
                $('.trend-and-value .sensor-value').text('---').show();
                $('.value-details').html('').show();
                $('#unitsLabelUpdated .c-sprite').html('').hide();
                $('.value-details-icon').hide();
                $('.value-details2').html('<div style="color:#00FFFF" class="units-label">' + data.bgUnits + '</div>').show();
                $('.value-details').html('<div class="time-value">' + this.res('At') + ' ' + data.lastValueTime + '</div><div class="date-value">' + ' ' + data.lastValueDate + '</div><span class="pump-time-label">' + '</span>').show();
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    //$('.value-details2').css({'margin-top':'60%'});
                    $('.value-details').css({ 'clear': 'both' });
                    $('#unitsLabelUpdated').css({ 'right': '35px' });
                    $('#bgtrendmain').css({ 'float': 'left', 'width': '100%' });
                }
                else {
                    $(document).ready(function () {
                        $(window).on('orientationchange', function (event) {
                            if (isLandscape()) {
                                $('.value-details').css({ 'float': 'left', 'top': '20px', 'padding-top': '40px' });
                            }
                            else {
                                $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                            }
                        });
                        if (isLandscape()) {
                            $('.value-details').css({ 'top': '50px', 'padding-top': '40px' });
                        }
                        else {
                            $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                        }
                    });
                    $('#unitsLabelUpdated').css({ 'right': '-140px', 'margin-top': '30px' });
                }
            }
            else if (msgStatusMessage == "SENSOR_OFF") {
                if (activeInsulin25) {
                    $('.trend-and-value .sensor-value').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                }
                else if (activeInsulin75) {
                    $('.trend-and-value .sensor-value').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                }
                else if (msgStatusMessage == "BLUETOOTH_OFF" || msgStatusMessage == "UPDATING" || msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "PUMP_PAIRING_LOST" || msgStatusMessage == "LOST_PUMP_SIGNAL" || msgStatusMessage == "PUMP_NOT_PAIRED") {
                    $('.trend-and-value .sensor-value').html('<span class="value">--- ' + this.res('InsulineUnits') + '</span><br /><span class="label">' + this.res('activeinsulin') + '</span>');
                }
                else if (pd.sActiveInsulinAmount >= 0) {
                    $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:100px;margin-top:30px;"> <span>' + this.res('activeinsulin') + '</span> <br />' + this.exactPrecision(pd.sActiveInsulinAmount, pd.sPrecision) + ' ' + this.res('InsulineUnits') + '</div>').show();
                    $('.value-details').html('').hide();
                    $('#unitsLabelUpdated').html('').hide();
                    $('#pumpinsulin').html('').hide();
                }
            }
            else if (msgStatusMessage != "NO_ERROR_MESSAGE" && msgStatusMessage != "SENSOR_OFF") {
                if (msgStatusMessage == "CALIBRATION_REQUIRED") {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:100px;margin-top:30px;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res('CALIBRATE_NOW') + '</div>' + '</div>').show();
                    }
                    else {
                        $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:100px;margin-top:30px;position:relative;left:-5px;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res('Nstatus.calibration.required') + '</div>' + '</div>').show();
                    }
                }
                else {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        if (msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "UPDATING") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:100px;margin-top:30px;"><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                        else {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:100px;margin-top:30px;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                    }
                    else {
                        if (msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "UPDATING") {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:100px;margin-top:30px;position:relative;left:-60px;"><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                        else {
                            $('.trend-and-value .sensor-value').html('<div style="font-size:20px;height:100px;margin-top:30px;position:relative;left:-60px;"><div id="exclaim"></div><div style="margin-top:20px;">' + this.res(msgStatusMessage) + '</div>' + '</div>').show();
                        }
                    }
                }
                $('.value-details').html('').hide();
                $('#unitsLabelUpdated').html('').hide();
                if (msgStatusMessage == "LOST_PUMP_SIGNAL") {
                    $('#pumpinfo #pumpinsulin .value').text('-- ' + this.res('InsulineUnits')).show();
                }
                else {
                    $('#pumpinfo #pumpinsulin').html('').show();
                }
            }
            else {
                $('.trend').removeClass('off');
                $('.device-status').hide();
                $('.trend-and-value .sensor-value').text(data.lastValue).show();
                $('.value-details2').html('<div ' + this.getUnitsColor() + ' class="units-label">' + data.bgUnits + '</div>').show();
                $('.value-details').html('<div class="time-value">' + this.res('At') + ' ' + data.lastValueTime + '</div><div class="date-value">' + ' ' + data.lastValueDate + '</div><span class="pump-time-label">' + '</span>').show();
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    //var autoModeActive = $('#autoModeActive');
                    //var display = autoModeActive.css('display');
                    //if(display == 'block'){
                    //$('.value-details').css({'margin-top':'30%'});
                    //}else{
                    $('.value-details').css({ 'margin-top': '10%' });
                    //}
                }
                else {
                    $(document).ready(function () {
                        $(window).on('orientationchange', function (event) {
                            if (isLandscape()) {
                                $('.value-details').css({ 'top': '50px', 'padding-top': '40px' });
                            }
                            else {
                                $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                            }
                        });
                        if (isLandscape()) {
                            $('.value-details').css({ 'top': '50px', 'padding-top': '40px' });
                        }
                        else {
                            $('.value-details').css({ 'float': 'right', 'top': '50px', 'padding-top': '40px' });
                        }
                    });
                }
            }
            $('.trend-and-value').show();
        }
        else {
            $('.value-details').html('').hide();
            $('.value-details2').html('').hide();
            $('.trend').addClass('off');
            $('.trend-and-value > :not(.sensor-value)').hide();
            $('.trend-and-value .sensor-value').text('--').show();
            $('.value-details').html('');
            $('.value-details2').html('');
            $('.trend-and-value').show();
        }
        // Update Alarms Display
        this.updateAlarmsDisplay(data);
    },
    /*Change implemented by Zimetrics*/
    /*FG20-FSG10-FR10-TR10-SS1 - Time in range function*/
    updateTimeInRangeScreen: function (data) {
        var jsonData = $.cpmAppJsonData;
        var autoModeActive = $('#autoModeActive');
        var msgStatusMessage = data.systemStatusMessage;
        var flagNotEnoughData = true;
        var i;
        if (msgStatusMessage == "SENSOR_OFF") {
            $('.cpm-page .status-message-icon.ui-link').html('').hide();
        }
        this.localizeByTextAttr('Ntime.in.range.timerrange');
        this.localizeByTextAttr('Ntime.in.range.last.24hours');
        this.localizeByTextAttr('Ntime.in.range.abovehigh.mgdl');
        this.localizeByTextAttr('Ntime.in.range.in.range');
        this.localizeByTextAttr('Ntime.in.range.belowlow.mgdl');
        this.localizeByTextAttr('Ntime.in.range.average');
        this.localizeByTextAttr('Ntime.in.range.not.enough.data');
        this.localizeByTextAttr('CONDUIT_BAD');
        for (i = 0; i <= 287; i++) {
            if (data.sgs[i].sg != 0) {
                flagNotEnoughData = false;
            }
        }
        if (flagNotEnoughData == true) {
            clearInterval(stopPumpBanner);
            clearInterval(stopShieldBlinking);
            autoModeActive.css({ 'display': 'none' });
            $('#timeInRange').css({ 'display': 'none' });
            $('#disabledTimeInRange').css({ 'display': 'block' });
            $('#notEnoughData span').html(this.res('Ntime.in.range.not.enough.data'));
            $('.status-message').html(this.res('Updated') + '<br /><b>' + data.sUpdatedTime + ' ' + data.sUpdatedDateLonger + '</b>');
            return null;
        }
        if (isInfoUnavailable) {
            clearInterval(stopPumpBanner);
            clearInterval(stopShieldBlinking);
            autoModeActive.css({ 'display': 'none' });
            $('#timeInRange').css({ 'display': 'none' });
            $('#disabledTimeInRange').css({ 'display': 'block' });
            $('#notEnoughData span').html(this.res('CONDUIT_BAD'));
            $('.status-message').html(this.res('Updated') + '<br /><b>' + data.sUpdatedTime + ' ' + data.sUpdatedDateLonger + '</b>');
            return null;
        }
        $('.status-message').html(this.res('Updated') + '<br /><b>' + data.sUpdatedTime + ' ' + data.sUpdatedDateLonger + '</b>');
        var averageSG = jsonData['averageSG'];
        var avgSG = this.getBGValue(averageSG);
        var belowHypoLimit = jsonData['belowHypoLimit'];
        var aboveHyperLimit = jsonData['aboveHyperLimit'];
        var timeInRange = jsonData['timeInRange'];
        var timeInRangeCircle = jsonData['timeInRange'];
        if (timeInRange < 0 || timeInRange > 100) {
            timeInRangeCircle = "--" + " ";
        }
        if (averageSG == 0 && belowHypoLimit == 0 && aboveHyperLimit == 0 && timeInRange == 0) {
            $('#timeInRange').css({ 'display': 'none' });
            $('#disabledTimeInRange').css({ 'display': 'block' });
        }
        if (aboveHyperLimit < 0 || aboveHyperLimit > 100) {
            $('#aboveHigh').html('--' + '' + '%');
        }
        else {
            $('#aboveHigh').html(aboveHyperLimit + '%');
        }
        if (data.jsonBGUnits == 'MGDL') {
            $('#aboveHighTxt').html(this.res('Ntime.in.range.abovehigh.mgdl'));
        }
        else if (data.jsonBGUnits == 'MMOL_L') {
            $('#aboveHighTxt').html(this.res('Ntime.in.range.abovehigh.mmoll'));
        }
        if (timeInRange < 0 || timeInRange > 100) {
            $('#inRange').html('--' + '' + '%');
        }
        else {
            $('#inRange').html(timeInRange + '%');
        }
        if (belowHypoLimit < 0 || belowHypoLimit > 100) {
            $('#belowLow').html('--' + '' + '%');
        }
        else {
            $('#belowLow').html(belowHypoLimit + '%');
        }
        if (data.jsonBGUnits == 'MGDL') {
            $('#belowLowTxt').html(this.res('Ntime.in.range.belowlow.mgdl'));
        }
        else if (data.jsonBGUnits == 'MMOL_L') {
            $('#belowLowTxt').html(this.res('Ntime.in.range.belowlow.mmoll'));
        }
        if ((data.jsonBGUnits == 'MGDL' && (avgSG < 40 || avgSG > 400))
            || (data.jsonBGUnits == 'MMOL_L' && (avgSG < 2.2 || avgSG > 22.2))) {
            $('#avgSg').html('---' + ' ' + data.bgUnits);
        }
        else {
            $('#avgSg').html(avgSG + ' ' + data.bgUnits);
        }
        if (data.jsonBGUnits == 'MGDL' && (avgSG < 40 || avgSG > 400)) {
            $('#avgSg').html('---' + ' ' + data.bgUnits);
        }
        else if (data.jsonBGUnits == 'MGDL' && (!avgSG < 40 || !avgSG > 400)) {
            $('#avgSg').html(avgSG + ' ' + data.bgUnits);
        }
        if (data.jsonBGUnits == 'MMOL_L' && (avgSG < 2.2 || avgSG > 22.2)) {
            $('#avgSg').html('---' + ' ' + data.bgUnits);
        }
        else if (data.jsonBGUnits == 'MMOL_L' && (!avgSG < 2.2 || !avgSG > 22.2)) {
            $('#avgSg').html(avgSG + ' ' + data.bgUnits);
        }
        // Update Alarms Display
        this.updateAlarmsDisplay(data);
        var doughnutdData = {
            labels: [
                "Red",
                "Yellow",
                "Green"
            ],
            datasets: [
                {
                    data: [belowHypoLimit, aboveHyperLimit, timeInRange],
                    backgroundColor: [
                        "#FF415F",
                        "#FFCD00",
                        "#00D7A5"
                    ],
                    hoverBackgroundColor: [
                        "#FF415F",
                        "#FFCD00",
                        "#00D7A5"
                    ],
                    borderWidth: 3,
                    borderColor: "#000000",
                }
            ]
        };
        var promisedDeliveryChart = new Chart(document.getElementById('myChart'), {
            type: 'doughnut',
            data: doughnutdData,
            options: {
                cutoutPercentage: 80,
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                tooltips: {
                    enabled: false
                }
            }
        });
        Chart.pluginService.register({
            beforeDraw: function (chart) {
                var width = chart.chart.width, height = chart.chart.height, ctx = chart.chart.ctx;
                ctx.restore();
                var fontSize = (height / 114).toFixed(2);
                ctx.font = fontSize + "em sans-serif";
                ctx.textBaseline = "middle";
                var text = (timeInRangeCircle + "%"), textX = Math.round((width - ctx.measureText(text).width) / 2), textY = height / 2;
                ctx.fillStyle = '#FFFFFF';
                ctx.fillText(text, textX, textY);
                ctx.save();
            }
        });
    },
    /**
     * Set Status screen state as defined by parsed JSON @data.
     * Update Username, Status icon and message, Sensor, Pump and conduit icons,
     * Localize static strings of Status screen.
     */
    updateStatusScreen: function (data) {
        $('.username').html(data.firstname + ' <b>' + data.surname + '</b>');
        $('.status-message').html(this.res('Updated') + '<br /><b>' + data.sUpdatedTime + ' ' + data.sUpdatedDateLonger + '</b>');
        var isGuardian = this.parsedData.deviceFamily == "GUARDIAN";
        var isNGP = this.parsedData.deviceFamily == "NGP";
        // Headers
        var header;
        if (isGuardian) {
            this.localize('tr.sensor-guardian th', 'Sensor');
            header = "GuardianConnect";
            this.localize('tr.cloudpost-guardian th', header);
        }
        else if (isNGP) {
            header = "Nconnect";
            this.localize('tr.sensor th', 'Sensor');
            this.localize('tr.pump th', 'Pump');
            this.localize('tr.cloudpost th', header);
        }
        else {
            header = "MinimedConnect";
            this.localize('tr.sensor th', 'Sensor');
            this.localize('tr.pump th', 'Pump');
            this.localize('tr.cloudpost th', header);
        }
        this.localize('.log-off-link span span', 'Logoff');
        // Disable Controls
        this.beforeUpdateStatus();
        // Update Status screens
        this.updateStatusIcons(data);
        if (isGuardian || isNGP) {
            if (data.deviceSerialNumber != null && data.deviceSerialNumber != "0") {
                $("#deviceSerialNumber").text(data.deviceSerialNumber);
                $("#appidlabel").show();
                $("#appserialnumber").show();
            }
        }
        else {
            $("#appidlabel").hide();
            $("#appserialnumber").hide();
        }
        this.showPrettyJson();
    },
    // Display debug panel with pretty JSON text
    showDebug: function () {
        var dp = $('.debug-panel');
        if (!dp.is(':visible')) {
            dp.show();
            $.cpmApp.showPrettyJson();
        }
        else {
            dp.hide();
            dp.html('');
        }
    },
    // Display prettified JSON data in debug panel if it's visible.
    showPrettyJson: function () {
        var dp = $('.debug-panel');
        if (dp.is(':visible')) {
            dp.html(this.getPrettyJson());
        }
    },
    /**
     * Generate pretty, stringfified JSON
     **/
    getPrettyJson: function () {
        var last24HoursPrettyJson;
        try {
            last24HoursPrettyJson = JSON.stringify($.cpmAppJsonData, null, 2);
        }
        catch (e) {
            last24HoursPrettyJson = '{}';
        }
        return last24HoursPrettyJson;
    },
    /**
     * Reset the Sensor, Pump, and conduit display before showing updated state
     */
    beforeUpdateStatus: function (data) {
        // Sensor
        var sensorCalibration = $('.sensor-calibration-due-time');
        var sensorCalibrationLabel = $('.sensor-calibration-due-time + div');
        var sensorEndofLife = $('.sensor-days-to-change');
        var sensorEndofLifeLabel = $('.sensor-days-to-change + div');
        var isNGP = this.parsedData.deviceFamily == "NGP";
        var isGM = this.parsedData.deviceFamily == "GUARDIAN";
        $('.sensor-in-range').removeClass('true off unknown');
        $('.sensor-in-range').html('');
        sensorCalibration.removeClass('st0 st1 st2 st3 st4 unknown');
        sensorEndofLife.removeClass('l0 l1 l2 l3 l4 l5 l6 l7');
        sensorCalibrationLabel.html('<b>' + '-- ' + '</b>' + this.res('TimeHrUnits'));
        sensorEndofLife.removeClass('l0 l1 l2 l3 l4 l5 l6 unknown');
        sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
        // Pump
        $('.pump-in-range').removeClass('true unknown');
        this.updatePumpInsulineLevelDisplay(0, '-- ', this.res('InsulineUnits'));
        var hideText;
        if (isNGP) {
            sensorEndofLife.addClass('hidden-sensor-days-to-change');
            sensorEndofLifeLabel.addClass('hidden-sensor-days-to-change');
            hideText = true;
        }
        else {
            hideText = false;
        }
        if (isGM) {
            $("tr.cloudpost").hide();
            $("tr.pump").hide();
            $("tr.sensor").hide();
        }
        else {
            $("tr.cloudpost-guardian").hide();
            $("tr.sensor-guardian").hide();
            $("tr.transmitter-guardian").hide();
        }
        this.updateBatteryLevelDisplay('.pump-battery', -1, '%', hideText);
        // CareLink Connect
        this.updateBatteryLevelDisplay('.cloudpost-battery', -1, '%');
        $('.cloudpost-in-range-signal-level').removeClass('true bars-1 bars-2 bars-3');
        $("#deviceSerialNumber").text("--");
    },
    /**
     * Show updated Sensor, Pump, and conduit status
     * @param {Object} data Object with data values parsed from last 24 hours JSON
     */
    /*Change implemented by Zimetrics*/
    /*FG20-FSG10-FR10-TR10-SS1 - Device Status Icons Screen code updated for pumpBattery, Reservoir, Sensor Calibration and Sensor Duration*/
    updateStatusIcons: function (data) {
        var sensorInRange = $('.sensor-in-range');
        var sensorInRangeLabel = $('.sensor-in-range + div');
        var sensorEndofLife = $('.sensor-days-to-change');
        var sensorEndofLifeLabel = $('.sensor-days-to-change + div');
        var sensorCalibration = $('.sensor-calibration-due-time');
        var sensorCalibrationLabel = $('.sensor-calibration-due-time + div');
        var isSensorOff = data.sensorState == "SENSOR_OFF" || data.sensorState == "TRANSMITTER_DISCONNECTED" || data.sensorState == "SENSOR_UNPLUGGED";
        var isSpecialCalibState = (data.sensorState == "SENSOR_CALIBRATION_REJECTED") || (data.sensorState == "SENSOR_ERROR") || (data.sensorState == "SENSOR_WARM_UP");
        var conduitStatusDisconnected = !data.conduitInRange;
        var pumpStatusUnknown = conduitStatusDisconnected;
        var sensorStatusUnknown = pumpStatusUnknown || !data.pumpCommunicationState;
        var isNGP = data.deviceFamily == 'NGP';
        var isGM = data.deviceFamily == 'GUARDIAN';
        var goodSensor = false;
        var pd = data;
        var pumpCommunicationState = pd.pumpCommunicationState;
        var gstCommunicationState = pd.gstCommunicationState;
        var pumpBatteryLevel = data.medicalDeviceBattery;
        var resLevel = data.pumpResLevelPercent;
        var msgStatusMessage = data.systemStatusMessage;
        var sensorDurationHours = pd.sensorHoursToChange;
        var timeToNextCalibrationHours = pd.sensorCalibrationTime;
        var sensorDurationMinutes = pd.sensorDurationMinutes;
        var timeToNextCalibrationMinutes = pd.timeToNextCalibrationMinutes;
        var reservoirRemainingUnits = pd.reservoirRemainingUnits;
        var resAmount = data.pumpResAmount;
        var timeCalMinutes = 0;
        var senDurMinutes = 0;
        timeCalMinutes = timeToNextCalibrationMinutes / 60;
        senDurMinutes = sensorDurationMinutes / 60;
        // 1 - Sensor
        if (isGM) {
            goodSensor = data.sensorInRange && !isSensorOff;
        }
        else {
            goodSensor = data.sensorInRange && !isSensorOff && !sensorStatusUnknown;
        }
        if (msgStatusMessage == "SENSOR_OFF") {
            $('.cpm-page .status-message-icon.ui-link').html('').hide();
        }
        var hideText;
        if (isNGP) {
            hideText = true;
        }
        else {
            hideText = false;
        }
        var flagSensorDHours = false;
        if (data.sensorState == "WAIT_TO_CALIBRATE" || data.sensorState == "DO_NOT_CALIBRATE" || data.sensorState == "CALIBRATING" || data.sensorState == "WARM_UP" || data.sensorState == "CHANGE_SENSOR") {
            flagSensorDHours = true;
        }
        // Sensor Calibration text
        if (msgStatusMessage != "SENSOR_OFF" && data.timeToNextCalibrationMinutes != undefined) {
            if (calibAddClass == "unknown" || calibAddClass == "reject" || (timeToNextCalibrationHours > 170 && timeToNextCalibrationHours != 255) || isInfoUnavailable) {
                sensorCalibrationLabel.html('<b> --- </b>');
            }
            else if (data.sensorCalibrationTime <= 170 && data.timeToNextCalibrationMinutes >= 60) {
                sensorCalibrationLabel.html('<b>' + data.sensorCalibrationTime + ' </b>' + this.res('TimeHrUnits'));
            }
            else if (data.timeToNextCalibrationMinutes < 60) {
                sensorCalibrationLabel.html('<b>' + timeCalMinutes.toFixed(2) + ' </b>' + this.res('TimeHrUnits'));
            }
            if (flagSensorDHours == true) {
                sensorCalibrationLabel.html('');
            }
            if ((pumpCommunicationState == true || pumpCommunicationState == false) && gstCommunicationState == false && (timeToNextCalibrationHours == null || timeToNextCalibrationHours == 255)) {
                sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            if (data.sensorState == "SENSOR_DISCONNECTED") {
                sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            if (timeToNextCalibrationHours == 255) {
                sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
        }
        else if (data.timeToNextCalibrationMinutes == undefined) {
            if (calibAddClass == "unknown" || calibAddClass == "reject" || (timeToNextCalibrationHours > 170 && timeToNextCalibrationHours != 255) || isInfoUnavailable) {
                sensorCalibrationLabel.html('<b> --- </b>');
            }
            else if (data.sensorCalibrationTime <= 170) {
                sensorCalibrationLabel.html('<b>' + data.sensorCalibrationTime + ' </b>' + this.res('TimeHrUnits'));
            }
            if (flagSensorDHours == true) {
                sensorCalibrationLabel.html('');
            }
            if ((pumpCommunicationState == true || pumpCommunicationState == false) && gstCommunicationState == false && (timeToNextCalibrationHours == null || timeToNextCalibrationHours == 255)) {
                sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            if (data.sensorState == "SENSOR_DISCONNECTED") {
                sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            if (timeToNextCalibrationHours == 255) {
                sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
        }
        // Sensor end of life
        var daysDisplay = Math.min(data.sensorDaysToChange, 7);
        if (msgStatusMessage != "SENSOR_OFF") {
            //text
            if ((data.sensorDaysToChange > 170 && data.sensorDaysToChange != 255) || (data.sensorHoursToChange > 170 && data.sensorHoursToChange != 255)) {
                daysDisplay = 7; /* use unknown icon */
                sensorEndofLifeLabel.html('<b> --- </b>');
            }
            else {
                if (data.sensorDurationMinutes != undefined) {
                    if (data.sensorHoursToChange == 0 && !isInfoUnavailable && data.sensorDurationMinutes < 1) {
                        sensorEndofLifeLabel.html('<b>' + this.res('Nuser.expired') + '</b>');
                    }
                    else if (data.sensorHoursToChange > 170 && isInfoUnavailable) {
                        sensorEndofLifeLabel.html('<b> --- </b>');
                    }
                    else if (data.sensorHoursToChange <= 23 && data.sensorDurationMinutes >= 60) {
                        sensorEndofLifeLabel.html('<b>' + data.sensorHoursToChange + ' </b>' + this.res('TimeHrUnits'));
                    }
                    else if (data.sensorDurationMinutes < 60) {
                        sensorEndofLifeLabel.html('<b>' + senDurMinutes.toFixed(2) + ' </b>' + this.res('TimeHrUnits'));
                    }
                    else {
                        sensorEndofLifeLabel.html('<b>' + daysDisplay + ' </b>' + this.res('DayUnits'));
                    }
                }
                else if (data.sensorDurationMinutes == undefined) {
                    if (data.sensorHoursToChange == 0 && !isInfoUnavailable) {
                        sensorEndofLifeLabel.html('<b>' + this.res('Nuser.expired') + '</b>');
                    }
                    else if (data.sensorHoursToChange > 170 && isInfoUnavailable) {
                        sensorEndofLifeLabel.html('<b> --- </b>');
                    }
                    else if (data.sensorHoursToChange <= 23) {
                        sensorEndofLifeLabel.html('<b>' + data.sensorHoursToChange + ' </b>' + this.res('TimeHrUnits'));
                    }
                    else {
                        sensorEndofLifeLabel.html('<b>' + daysDisplay + ' </b>' + this.res('DayUnits'));
                    }
                }
            }
            if ((pumpCommunicationState == true || pumpCommunicationState == false) && gstCommunicationState == false && (sensorDurationHours == null || sensorDurationHours == 255)) {
                sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            if (sensorDurationHours == 255) {
                sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
        }
        if (msgStatusMessage == "SENSOR_OFF") {
            $('tr.sensor').css({ 'display': 'none' });
        }
        // 1 - Sensor section
        if (goodSensor) { // Sensor is good
            sensorInRange.addClass('true');
            // Sensor Calibration icon
            var calibAddClass = "";
            /*switch (data.calibStatus) {
                case "DUENOW": calibAddClass = "st0"; break;
                case "LESS_THAN_THREE_HRS": calibAddClass = "st1"; break;
                case "LESS_THAN_SIX_HRS": calibAddClass = "st2"; break;
                case "LESS_THAN_NINE_HRS": calibAddClass = "st3"; break;
                case "LESS_THAN_TWELVE_HRS": calibAddClass = "st4"; break;
                default: // fall through
                case "UNKNOWN": calibAddClass = "unknown"; break;
            }*/
            if (isGM && isSpecialCalibState) {
                // special state for cgm, overrides calib status
                calibAddClass = "reject";
            }
            /*sensorCalibration.addClass(calibAddClass);*/
            //icon
            /*if (daysDisplay == 7){
                sensorEndofLife.addClass("l7");
            }else if (daysDisplay > 2){
                sensorEndofLife.addClass("l3");
            }
            else if( daysDisplay == 2 && daysDisplay > 1){
                sensorEndofLife.addClass("l2");
            }
            else if (daysDisplay == 1 && daysDisplay > 0){
                sensorEndofLife.addClass("l1");
                if (data.sensorHoursToChange <= 23){// 24 should be shown as 1 day
                    sensorEndofLifeLabel.html('<b>' + data.sensorHoursToChange + ' </b>' + this.res('TimeHrUnits'));
                }
            }
            else{ // <=0
                sensorEndofLife.addClass("l0");
                sensorEndofLifeLabel.html('<b>' + data.sensorDaysToChange + ' </b>' + this.res('TimeHrUnits'));
            }
        } else {
          sensorEndofLife.addClass('unknown');
          sensorCalibration.addClass('unknown');*/
            if (!isGM) {
                if (isSensorOff) {
                    // Sensor is off, but connected to the pump.
                    sensorInRange.addClass('off');
                    sensorInRange.html($.cpmApp.res('OFF'));
                }
                else if (sensorStatusUnknown) {
                    sensorInRange.addClass('unknown');
                }
                else {
                    // Sensor is disconnected. Do nothing.
                }
            }
            else {
                if (isSensorOff) {
                    // Sensor is off, but connected to the pump.
                    sensorInRange.addClass('off');
                }
                else if (sensorStatusUnknown) {
                    sensorInRange.addClass('unknown');
                }
                else {
                    // Sensor is disconnected. Do nothing.
                }
            }
        }
        /* reservoirRemainingUnits is used below directly so this calc. is not required.
        var rLevel = resLevel;
        var rSize = pd.pumpResAmount;
        var rDecimal = (rLevel/100)*rSize;*/
        // 2 - Pump (applies to translator only)
        if (pumpCommunicationState == true && !conduitStatusDisconnected) {
            $('.pump-in-range').addClass('true');
            $('#pumpInRange').html('<b>' + this.res('Nuser.connected') + ' </b>');
            if (gstCommunicationState == false && msgStatusMessage != "SENSOR_OFF" && data.sensorState != "NO_DATA_FROM_PUMP") {
                $('.sensor-in-range').addClass('gstDisconnected');
                $('#sensorInRange').html('<b>' + this.res('Nuser.disconnected') + ' </b>');
            }
            else if (msgStatusMessage == "NO_ERROR_MESSAGE" && data.sensorState == "NO_DATA_FROM_PUMP" && gstCommunicationState == false) {
                $('.sensor-in-range').addClass('unknown');
                $('#sensorInRange').html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            else if (!gstCommunicationState || gstCommunicationState == undefined || gstCommunicationState == null) {
                $('.sensor-in-range').addClass('unknown');
                $('#sensorInRange').html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            else if (gstCommunicationState == true && msgStatusMessage != "SENSOR_OFF") {
                $('.sensor-in-range').addClass('true');
                $('#sensorInRange').html('<b>' + this.res('Nuser.connected') + '</b>');
            }
        }
        else if (pumpCommunicationState == false || conduitStatusDisconnected) {
            $('.pump-in-range').addClass('false');
            $('.cpm-page .status-message-icon.ui-link.status-error-app').css({ 'background-position': '0 -302px' });
            $('#pumpInRange').html('<b>' + this.res('Nuser.disconnected') + ' </b>');
            if (msgStatusMessage != "SENSOR_OFF") {
                $('.sensor-in-range').addClass('unknown');
                $('#sensorInRange').html('<b>' + this.res('Nuser.unknown') + '</b>');
                $('.sensor-calibration-due-time').addClass('questionMark');
                sensorCalibrationLabel.html('<b> --- </b>');
                sensorEndofLife.addClass('l7');
                sensorEndofLifeLabel.html('<b> --- </b>');
            }
        }
        else {
            // Pump status is unknown which means insulin levels and battery level are also unknown
            $('.pump-insuline-units').addClass('unknown');
            $('.pump-battery').addClass('unknown');
            if (pumpStatusUnknown) {
                //$('.pump-in-range').addClass('unknown');
            }
            else {
                // Pump is disconnected. Do nothing.
                $('.pump-in-range').addClass('false');
                $('#pumpInRange').html('<b>' + this.res('Nuser.disconnected') + ' </b>');
            }
        }
        //Pump Battery
        if (pumpBatteryLevel >= 76 && pumpBatteryLevel <= 100) {
            $('.pump-battery').addClass('p100');
            $('#pumpBatteryLevel').html('<b>' + pumpBatteryLevel + ' %</b>');
        }
        else if (pumpBatteryLevel >= 51 && pumpBatteryLevel <= 75) {
            $('.pump-battery').addClass('p75');
            $('#pumpBatteryLevel').html('<b>' + pumpBatteryLevel + ' %</b>');
        }
        else if (pumpBatteryLevel >= 26 && pumpBatteryLevel <= 50) {
            $('.pump-battery').addClass('p50');
            $('#pumpBatteryLevel').html('<b>' + pumpBatteryLevel + ' % </b>');
        }
        else if (pumpBatteryLevel >= 1 && pumpBatteryLevel <= 25) {
            $('.pump-battery').addClass('p25');
            $('#pumpBatteryLevel').html('<b>' + pumpBatteryLevel + ' %</b>');
        }
        else if (pumpBatteryLevel == 0 && !isInfoUnavailable) {
            $('.pump-battery').addClass('p0');
            $('#pumpBatteryLevel').html('<b>' + pumpBatteryLevel + ' %</b>');
        }
        else if (pumpBatteryLevel < 0 || pumpBatteryLevel > 100) {
            $('.pump-battery').addClass('unknown');
            $('#pumpBatteryLevel').html('<b>---</b>');
        }
        if ((!pumpCommunicationState || pumpCommunicationState == false) && !isInfoUnavailable) {
            $('.pump-battery').addClass('unknown');
            $('#pumpBatteryLevel').html('<b>---</b>');
        }
        if (msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "UPDATING") {
            $('.pump-battery').addClass('unknown');
            $('#pumpBatteryLevel').html('<b>' + this.res('Nuser.unknown') + '</b>');
        }
        //Reservoir
        if (resLevel >= 0) {
            if (resLevel >= 85 && resLevel <= 100) {
                $('.pump-insuline-units').addClass('p85');
                $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
            }
            else if (resLevel >= 71 && resLevel <= 84) {
                $('.pump-insuline-units').addClass('p71');
                $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
            }
            else if (resLevel >= 57 && resLevel <= 70) {
                $('.pump-insuline-units').addClass('p57');
                $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
            }
            else if (resLevel >= 43 && resLevel <= 56) {
                $('.pump-insuline-units').addClass('p43');
                $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
            }
            else if (resLevel >= 29 && resLevel <= 42) {
                $('.pump-insuline-units').addClass('p29');
                $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
            }
            else if (resLevel >= 15 && resLevel <= 28) {
                $('.pump-insuline-units').addClass('p15');
                $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
            }
            else if (resLevel >= 1 && resLevel <= 14) {
                $('.pump-insuline-units').addClass('p1');
                $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
            }
            else if (resLevel == 0) {
                $('.pump-insuline-units').addClass('pzero');
                if (!isInfoUnavailable) {
                    $('#pumpReservoirLevel').html('<b>' + reservoirRemainingUnits.toFixed(1) + ' ' + this.res('InsulineUnits') + '</b>');
                }
            }
        }
        if ((reservoirRemainingUnits < 0 || reservoirRemainingUnits > 309 || resLevel < 0) && (reservoirRemainingUnits != 0)) {
            $('.pump-insuline-units').addClass('resUnknown');
            $('#pumpReservoirLevel').html('<b>---</b>');
        }
        if ((pumpCommunicationState == false || resLevel < 0 || !reservoirRemainingUnits) && (reservoirRemainingUnits != 0) && (!isInfoUnavailable)) {
            $('.pump-insuline-units').addClass('resUnknown');
            $('#pumpReservoirLevel').html('<b>---</b>');
        }
        if (msgStatusMessage == "RECONNECTING_TO_PUMP" || msgStatusMessage == "UPDATING") {
            $('.pump-insuline-units').addClass('resUnknown');
            $('#pumpReservoirLevel').html('<b>' + this.res('Nuser.unknown') + '</b>');
        }
        //Calibration
        if (pumpCommunicationState == true && gstCommunicationState == true && (timeToNextCalibrationHours == null || timeToNextCalibrationHours == 255) && msgStatusMessage != "SENSOR_OFF" && msgStatusMessage != "SENSOR_DISCONNECTED" && data.sensorState != "CALIBRATION_REQUIRED" && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
            $('.sensor-calibration-due-time').addClass('questionMark');
        }
        else if (pumpCommunicationState == true && gstCommunicationState == true && timeToNextCalibrationHours != null && msgStatusMessage != "SENSOR_OFF" && timeToNextCalibrationMinutes != undefined) {
            if (timeToNextCalibrationHours > 10 && timeToNextCalibrationHours <= 170 && timeToNextCalibrationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st4');
            }
            else if (timeToNextCalibrationHours > 8 && timeToNextCalibrationHours <= 10 && timeToNextCalibrationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st3');
            }
            else if (timeToNextCalibrationHours > 6 && timeToNextCalibrationHours <= 8 && timeToNextCalibrationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st2');
            }
            else if (timeToNextCalibrationHours > 4 && timeToNextCalibrationHours <= 6 && timeToNextCalibrationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st1');
            }
            else if (timeToNextCalibrationHours > 2 && timeToNextCalibrationHours <= 4 && timeToNextCalibrationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('stlessThan4');
            }
            else if (timeToNextCalibrationHours > 0 && timeToNextCalibrationHours <= 2 && timeToNextCalibrationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('stlessThan2');
            }
            else if (timeToNextCalibrationMinutes > 0 && timeToNextCalibrationMinutes <= 60 && timeToNextCalibrationHours <= 1 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('stlessThan2');
            }
            else if (timeToNextCalibrationHours == 0 && data.sensorState == "CALIBRATION_REQUIRED") {
                $('.sensor-calibration-due-time').addClass('st0');
            }
            else if (timeToNextCalibrationHours > 170 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR" && data.sensorState != "CALIBRATION_REQUIRED")) {
                $('.sensor-calibration-due-time').addClass('questionMark');
            }
            else if (timeToNextCalibrationHours > 170 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('questionMark');
            }
            else if (data.sensorState == "WAIT_TO_CALIBRATE" || data.sensorState == "DO_NOT_CALIBRATE" || data.sensorState == "CALIBRATING" || data.sensorState == "WARM_UP" || data.sensorState == "CHANGE_SENSOR") {
                $('.sensor-calibration-due-time').addClass('threeDots');
                sensorCalibrationLabel.html('');
            }
        }
        else if (timeToNextCalibrationMinutes == undefined) {
            if (timeToNextCalibrationHours > 10 && timeToNextCalibrationHours <= 170 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st4');
            }
            else if (timeToNextCalibrationHours > 8 && timeToNextCalibrationHours <= 10 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st3');
            }
            else if (timeToNextCalibrationHours > 6 && timeToNextCalibrationHours <= 8 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st2');
            }
            else if (timeToNextCalibrationHours > 4 && timeToNextCalibrationHours <= 6 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('st1');
            }
            else if (timeToNextCalibrationHours > 2 && timeToNextCalibrationHours <= 4 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('stlessThan4');
            }
            else if (timeToNextCalibrationHours > 0 && timeToNextCalibrationHours <= 2 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('stlessThan2');
            }
            else if (timeToNextCalibrationMinutes > 0 && timeToNextCalibrationHours <= 1 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('stlessThan2');
            }
            else if (timeToNextCalibrationHours == 0 && data.sensorState == "CALIBRATION_REQUIRED") {
                $('.sensor-calibration-due-time').addClass('st0');
            }
            else if (timeToNextCalibrationHours > 170 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR" && data.sensorState != "CALIBRATION_REQUIRED")) {
                $('.sensor-calibration-due-time').addClass('questionMark');
            }
            else if (timeToNextCalibrationHours > 170 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                $('.sensor-calibration-due-time').addClass('questionMark');
            }
            else if (data.sensorState == "WAIT_TO_CALIBRATE" || data.sensorState == "DO_NOT_CALIBRATE" || data.sensorState == "CALIBRATING" || data.sensorState == "WARM_UP" || data.sensorState == "CHANGE_SENSOR") {
                $('.sensor-calibration-due-time').addClass('threeDots');
                sensorCalibrationLabel.html('');
            }
        }
        if ((pumpCommunicationState == true || pumpCommunicationState == false) && gstCommunicationState == false && msgStatusMessage != "SENSOR_OFF") {
            $('.sensor-calibration-due-time').addClass('questionMark');
        }
        if ((pumpCommunicationState == true || pumpCommunicationState == false) && gstCommunicationState == false && timeToNextCalibrationHours == null) {
            $('.sensor-calibration-due-time').addClass('questionMark');
        }
        if (data.sensorState == "SENSOR_DISCONNECTED") {
            $('.sensor-calibration-due-time').addClass('questionMark');
        }
        if (timeToNextCalibrationHours == 0) {
            $('.sensor-calibration-due-time').addClass('st0');
        }
        if (gstCommunicationState == false) {
            sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
        }
        //Sensor Duration Hours
        if (pumpCommunicationState == true && gstCommunicationState == true && (!sensorDurationHours || sensorDurationHours == null || sensorDurationHours == 255 || sensorDurationHours == undefined) && msgStatusMessage != "SENSOR_OFF" && (sensorDurationHours != 0)) {
            $('.sensor-days-to-change').addClass('l6');
            sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
        }
        if (pumpCommunicationState == true && gstCommunicationState == true && sensorDurationHours != null && msgStatusMessage != "SENSOR_OFF" && sensorDurationMinutes != undefined) {
            if (sensorDurationHours > 24 && sensorDurationHours <= 170 && sensorDurationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass('l1');
            }
            else if (sensorDurationHours > 12 && sensorDurationHours <= 24 && sensorDurationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass('l2');
            }
            else if (sensorDurationHours > 0 && sensorDurationHours <= 12 && sensorDurationMinutes > 60 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass("l3");
            }
            else if (sensorDurationMinutes > 0 && sensorDurationMinutes <= 60 && sensorDurationHours <= 1 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass("l3");
            }
            else if (sensorDurationHours == 0 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass('l4');
            }
            else if (sensorDurationHours > 170 && sensorDurationHours != 255 && data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR") {
                sensorEndofLife.addClass('l7');
                sensorEndofLifeLabel.html('<b> --- </b>');
            }
        }
        else if (sensorDurationMinutes == undefined) {
            if (sensorDurationHours > 24 && sensorDurationHours <= 170 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass('l1');
            }
            else if (sensorDurationHours > 12 && sensorDurationHours <= 24 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass('l2');
            }
            else if (sensorDurationHours > 0 && sensorDurationHours <= 12 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass("l3");
            }
            else if (sensorDurationMinutes > 0 && sensorDurationHours <= 1 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass("l3");
            }
            else if (sensorDurationHours == 0 && (data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR")) {
                sensorEndofLife.addClass('l4');
            }
            else if (sensorDurationHours > 170 && sensorDurationHours != 255 && data.sensorState != "WAIT_TO_CALIBRATE" && data.sensorState != "DO_NOT_CALIBRATE" && data.sensorState != "CALIBRATING" && data.sensorState != "WARM_UP" && data.sensorState != "CHANGE_SENSOR") {
                sensorEndofLife.addClass('l7');
                sensorEndofLifeLabel.html('<b> --- </b>');
            }
        }
        if ((pumpCommunicationState == true || pumpCommunicationState == false) && gstCommunicationState == false && msgStatusMessage != "SENSOR_OFF" && (sensorDurationHours == null || sensorDurationHours == 255)) {
            sensorEndofLife.addClass('l7');
        }
        if (data.sensorState == "WAIT_TO_CALIBRATE" || data.sensorState == "DO_NOT_CALIBRATE" || data.sensorState == "CALIBRATING" || data.sensorState == "WARM_UP" || data.sensorState == "CHANGE_SENSOR") {
            $('.sensor-days-to-change').addClass('l6');
            sensorEndofLifeLabel.html('');
        }
        if (gstCommunicationState == false) {
            sensorEndofLife.addClass('l7');
            sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
        }
        if (sensorDurationHours == 255) {
            sensorEndofLife.addClass('l7');
            sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
        }
        /*INTDASH-2469*/
        if (msgStatusMessage == "SENSOR_DISCONNECTED") {
            sensorEndofLife.addClass('l7');
            sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
        }
        if (isInfoUnavailable || msgStatusMessage == "BLUETOOTH_OFF") {
            if (msgStatusMessage != "SENSOR_OFF") {
                $('.pump-battery').addClass('unknown');
                $('#pumpBatteryLevel').html('<b>' + this.res('Nuser.unknown') + '</b>');
                $('.sensor-calibration-due-time').addClass('questionMark');
                sensorEndofLife.addClass('l7');
                $('.pump-insuline-units').addClass('resUnknown');
                $('#pumpReservoirLevel').html('<b>' + this.res('Nuser.unknown') + '</b>');
                sensorCalibrationLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
                sensorEndofLifeLabel.html('<b>' + this.res('Nuser.unknown') + '</b>');
            }
            else {
                $('.pump-battery').addClass('unknown');
                $('#pumpBatteryLevel').html('<b>---</b>');
                $('.pump-insuline-units').addClass('resUnknown');
                $('#pumpReservoirLevel').html('<b>---</b>');
            }
        }
        // 3 - CareLink Connect Device (app)
        if (isGM) {
            if (!goodSensor) {
                // connect device is disconnected so we don't know the battery levels
                $('.sensorbattery').addClass('unknown');
            }
            else {
                this.updateBatteryLevelDisplay('.sensorbattery', data.medicalDeviceBattery, '%');
            }
            this.updateConduitInRangeSignalLevelIcon('.cloudpost-GM-in-range-signal-level', data.conduitGSMSignalLevel, data.conduitGSMSignalBars, data.conduitInRange);
        }
        else {
            if (conduitStatusDisconnected) {
                // connect device is disconnected so we don't know the battery levels
                $('.cloudpost-battery').addClass('unknown');
            }
            else {
                this.updateBatteryLevelDisplay('.cloudpost-battery', data.conduitBatteryLevel, '%');
            }
            this.updateConduitInRangeSignalLevelIcon('.cloudpost-in-range-signal-level', data.conduitGSMSignalLevel, data.conduitGSMSignalBars, data.conduitInRange);
        }
    },
    /**
     * Show insuline level as icon with label.
     * @param {Number} iLevelPercent Integer with possible values of 0, 25, 50, 75 and 100.
     * @param {Number} iInsulineAmount Integer with possible values of 0, 25, 50, 75 and 100.
     * @param {String} sUnits Localized string to be used as insuline level label.
     */
    updatePumpInsulineLevelDisplay: function (iLevelPercent, iInsulineAmount, sUnits) {
        var element = $('.pump-insuline-units');
        var label = $('.pump-insuline-units + div');
        label.html('<b>' + iInsulineAmount + ' </b>' + sUnits);
        element.removeClass('p0 p25 p50 p75 p100 unknown');
        //element.addClass('p' + iLevelPercent);
    },
    /**
     * Show battery charge level from 0 to 100 percent as battery icon with label. -1 will be --
     * @param {String} sSelector jQuery selector for DOM element which displays the battery icon.
     * @param {Number} iLevelPercent Integer with possible values of 0, 25, 50, 75 and 100.
     * @param {String} sUnits Localized battery units label.
     */
    updateBatteryLevelDisplay: function (sSelector, iLevelPercent, sUnits, hideText, unknown) {
        var element = $(sSelector);
        var label = $(sSelector + ' + div');
        if (hideText) {
            label.html('');
        }
        else {
            var iLevelString = iLevelPercent >= 0 ? iLevelPercent : '-- ';
            label.html('<b>' + iLevelString + '</b>' + sUnits);
        }
        element.removeClass('p0 p25 p50 p75 p100 unknown');
        if (iLevelPercent >= 0) {
            element.addClass('p' + Math.ceil(iLevelPercent / 25) * 25);
        }
        else {
            //element.addClass('unknown');
        }
    },
    /**
     * Display signal level bars icon showing bars from 0 to 3
     * @param {Number} iSignalBars Integer from 0 to 3 presenting the signal level
     */
    updateConduitInRangeSignalLevelIcon: function (sSelector, iSignalLevel, iSignalBars, iConduitInRange) {
        var element = $(sSelector);
        var label = $(sSelector + ' + div');
        if (iConduitInRange) {
            element.addClass('bars-1');
        }
    },
    /*Start: This Code is implemented by Zimetrics*/
    /*FG20-FSG10-FR10-TR10-SS1 - Status Thereapy Icons function*/
    statusTherapyIcons: function () {
        var jsonData = $.cpmAppJsonData;
        var autoModeActive = $('#autoModeActive');
        if (!jsonData || isInfoUnavailable) {
            clearInterval(stopPumpBanner);
            clearInterval(stopShieldBlinking);
            autoModeActive.css({ 'display': 'none' });
            $('#timeInRange').css({ 'display': 'none' });
            $('#disabledTimeInRange').css({ 'display': 'block' });
            return null;
        }
        var tsi = jsonData['therapyAlgorithmState'];
        if (tsi == null || tsi == undefined) {
            autoModeActive.css({ 'display': 'none' });
        }
        var mNumber = jsonData['pumpModelNumber'];
        var pSuspendState = jsonData['medicalDeviceSuspended'];
        var tsiStatusMessage = jsonData['systemStatusMessage'];
        var autoShieldState = tsi != null && tsi != undefined ? tsi.autoModeShieldState : "";
        var pLgsState = tsi != null && tsi != undefined ? tsi.plgmLgsState : "";
        mNumber = mNumber != null && mNumber != undefined ? mNumber : "";
        pSuspendState = pSuspendState != null && pSuspendState != undefined ? pSuspendState : "";
        tsiStatusMessage = tsiStatusMessage != null && tsiStatusMessage != undefined ? tsiStatusMessage : "";
        autoShieldState = autoShieldState != null && autoShieldState != undefined ? autoShieldState : "";
        pLgsState = pLgsState != null && pLgsState != undefined ? pLgsState : "";
        var pumpBannerState = $('#pumpBannerState');
        var dispBanner = pumpBannerState.css('display');
        var showBlinkingShield = function () {
            if (isInfoUnavailable) {
                clearInterval(stopShieldBlinking);
                return;
            }
            var opacity = autoModeActive.css('opacity');
            var display = autoModeActive.css('display');
            if (opacity == '1' && display == 'block') {
                autoModeActive.css({ 'opacity': '0.5' });
            }
            else if (opacity == '0.5' && display == 'block') {
                autoModeActive.css({ 'opacity': '1' });
            }
            else {
                if (stopShieldBlinking != null && stopShieldBlinking != undefined)
                    clearInterval(stopShieldBlinking);
            }
        };
        if (dispBanner == 'none') {
            autoModeActive.css({ 'top': '82px' });
        }
        else {
            /*autoModeActive.css({'top':'115px'});*/
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                autoModeActive.css({ 'top': '37px' });
            }
            else {
                autoModeActive.css({ 'top': '38px' });
            }
        }
        if (stopShieldBlinking != null && stopShieldBlinking != undefined)
            clearInterval(stopShieldBlinking);
        if (tsiStatusMessage == "NO_ERROR_MESSAGE" || tsiStatusMessage == "NO_DATA_FROM_PUMP") {
            if (mNumber == "MMT-1880" || mNumber == "MMT-1881" || mNumber == "MMT-1883" || mNumber == "MMT-1882") {
                if (autoShieldState == "SAFE_BASAL" && pLgsState == "FEATURE_OFF" && pSuspendState == false) {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $(document).ready(function () {
                            $(window).on('orientationchange', function (event) {
                                if (isLandscape()) {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-187px -105px', 'top': '38px' });
                                }
                                else {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-277px -139px' });
                                }
                            });
                            if (isLandscape()) {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-187px -105px', 'top': '38px' });
                            }
                            else {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-277px -139px' });
                            }
                        });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '-190px -102px', 'top': '72px' });
                    }
                }
                else if (autoShieldState == "FEATURE_OFF" && pLgsState == "FEATURE_OFF") {
                    autoModeActive.css({ 'display': 'none' });
                }
                else if (autoShieldState == "FEATURE_OFF" && pLgsState == "REFRACTORY_PERIOD") {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $(document).ready(function () {
                            $(window).on('orientationchange', function (event) {
                                if (isLandscape()) {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-182px 19px', 'top': '38px' });
                                }
                                else {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-277px 43px' });
                                }
                            });
                            if (isLandscape()) {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-182px 19px', 'top': '38px' });
                            }
                            else {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-277px 43px' });
                            }
                        });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '-190px 12px', 'top': '72px' });
                    }
                }
                else if (autoShieldState == "FEATURE_OFF" && pLgsState == "MONITORING") {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $(document).ready(function () {
                            $(window).on('orientationchange', function (event) {
                                if (isLandscape()) {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '9px 20px', 'top': '38px' });
                                }
                                else {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '9px 43px' });
                                }
                            });
                            if (isLandscape()) {
                                autoModeActive.css({ 'display': 'block', 'background-position': '9px 20px', 'top': '38px' });
                            }
                            else {
                                autoModeActive.css({ 'display': 'block', 'background-position': '9px 43px' });
                            }
                        });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '9px 12px', 'top': '72px' });
                    }
                }
                else if (autoShieldState == "FEATURE_OFF"
                    && (pLgsState == "SUSPEND_FIRED_PLGM" || pLgsState == "SUSPEND_FIRED_LGS") && pSuspendState == true) {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $(document).ready(function () {
                            $(window).on('orientationchange', function (event) {
                                if (isLandscape()) {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '9px 20px', 'top': '38px' });
                                }
                                else {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '9px 43px' });
                                }
                            });
                            if (isLandscape()) {
                                autoModeActive.css({ 'display': 'block', 'background-position': '9px 20px', 'top': '38px' });
                            }
                            else {
                                autoModeActive.css({ 'display': 'block', 'background-position': '9px 43px' });
                            }
                        });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '9px 12px', 'top': '72px' });
                    }
                    stopShieldBlinking = setInterval(showBlinkingShield, 1430);
                }
                else if ((autoShieldState == "AUTO_BASAL" || autoShieldState == "SAFE_BASAL")
                    && pLgsState == "FEATURE_OFF" && pSuspendState == true) {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $(document).ready(function () {
                            $(window).on('orientationchange', function (event) {
                                if (isLandscape()) {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-90px -106px', 'top': '38px' });
                                }
                                else {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-136px -139px' });
                                }
                            });
                            if (isLandscape()) {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-90px -106px', 'top': '38px' });
                            }
                            else {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-136px -139px' });
                            }
                        });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '-90px -102px', 'top': '72px' });
                    }
                }
                else if (autoShieldState == "AUTO_BASAL" && pLgsState == "FEATURE_OFF" && pSuspendState == false) {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $(document).ready(function () {
                            $(window).on('orientationchange', function (event) {
                                if (isLandscape()) {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '6px -105px', 'top': '38px' });
                                }
                                else {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '6px -139px' });
                                }
                            });
                            if (isLandscape()) {
                                autoModeActive.css({ 'display': 'block', 'background-position': '6px -105px', 'top': '38px' });
                            }
                            else {
                                autoModeActive.css({ 'display': 'block', 'background-position': '6px -139px' });
                            }
                        });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '8px -102px', 'top': '72px' });
                    }
                }
            }
            else if (mNumber == "MMT-1811" || mNumber == "MMT-1812") {
                if (pLgsState == "FEATURE_OFF") {
                    autoModeActive.css({ 'display': 'none' });
                }
                else if (pLgsState == "REFRACTORY_PERIOD") {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        $(document).ready(function () {
                            $(window).on('orientationchange', function (event) {
                                if (isLandscape()) {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-189px -38px', 'top': '38px' });
                                }
                                else {
                                    autoModeActive.css({ 'display': 'block', 'background-position': '-278px -38px' });
                                }
                            });
                            if (isLandscape()) {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-189px -38px', 'top': '38px' });
                            }
                            else {
                                autoModeActive.css({ 'display': 'block', 'background-position': '-278px -38px' });
                            }
                        });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '-190px -38px', 'top': '72px' });
                    }
                }
                else if (pLgsState == "MONITORING") {
                    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                        autoModeActive.css({ 'display': 'block', 'background-position': '8px -38px' });
                    }
                    else {
                        autoModeActive.css({ 'display': 'block', 'background-position': '8px -38px', 'top': '38px' });
                    }
                }
                else if ((pLgsState == "SUSPEND_FIRED_PLGM" || pLgsState == "SUSPEND_FIRED_LGS") && pSuspendState == true) {
                    autoModeActive.css({ 'display': 'block', 'background-position': '8px -38px', 'opacity': '1' });
                    stopShieldBlinking = setInterval(showBlinkingShield, 1430);
                }
            } //Model Number elseif closed
            else if (mNumber == "MMT-1818A" || mNumber == "MMT-1818B" || mNumber == "MMT-1809" || mNumber == "MMT-1810" || mNumber == "MMT-1801" || mNumber == "MMT-1800" || mNumber == "MMT-1805") {
                autoModeActive.css({ 'display': 'none' });
            }
        }
        var displayIcon = autoModeActive.css('display');
        if (displayIcon == 'none') {
            /*$('.trend-and-value .sensor-value').css({'margin-left':'60px'});*/
            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                $('#unitsLabelUpdated').css({ 'float': 'right' });
            }
        }
    },
    /*Change implemented by Zimetrics*/
    /*FG20-FSG10-FR10-TR10-SS1 - SG value Units color change as per Therapy Icons*/
    getUnitsColor: function () {
        var jsonData = $.cpmAppJsonData;
        if (!jsonData || isInfoUnavailable) {
            clearInterval(stopPumpBanner);
            return null;
        }
        var autoModeActive = $('#autoModeActive');
        var tsi = jsonData['therapyAlgorithmState'];
        var pSuspendState = jsonData['medicalDeviceSuspended'];
        var tsiStatusMessage = jsonData['systemStatusMessage'];
        var autoShieldState = tsi != null && tsi != undefined ? tsi.autoModeShieldState : "";
        var pLgsState = tsi != null && tsi != undefined ? tsi.plgmLgsState : "";
        pSuspendState = pSuspendState != null && pSuspendState != undefined ? pSuspendState : "";
        tsiStatusMessage = tsiStatusMessage != null && tsiStatusMessage != undefined ? tsiStatusMessage : "";
        autoShieldState = autoShieldState != null && autoShieldState != undefined ? autoShieldState : "";
        pLgsState = pLgsState != null && pLgsState != undefined ? pLgsState : "";
        var colorCss = '';
        if (tsiStatusMessage == "NO_ERROR_MESSAGE" || tsiStatusMessage == "NO_DATA_FROM_PUMP") {
            if (autoShieldState == "SAFE_BASAL" && pLgsState == "FEATURE_OFF" && pSuspendState == false) {
                colorCss = '"color:#FFFFFF !important"';
            }
            else if (autoShieldState == "FEATURE_OFF" && pLgsState == "REFRACTORY_PERIOD") {
                colorCss = '"color:#00FFFF !important"';
            }
            else if (autoShieldState == "FEATURE_OFF" && pLgsState == "MONITORING") {
                colorCss = '"color:#00FFFF !important"';
            }
            else if (autoShieldState == "FEATURE_OFF"
                && (pLgsState == "SUSPEND_FIRED_PLGM" || pLgsState == "SUSPEND_FIRED_LGS") && pSuspendState == true) {
                colorCss = '"color:#00FFFF !important"';
            }
            else if ((autoShieldState == "AUTO_BASAL" || autoShieldState == "SAFE_BASAL")
                && pLgsState == "FEATURE_OFF" && pSuspendState == true) {
                colorCss = '"color:#FFFFFF !important"';
            }
            else if (autoShieldState == "AUTO_BASAL" && pLgsState == "FEATURE_OFF" && pSuspendState == false) {
                colorCss = '"color:#FFFFFF !important"';
            }
            else if (pLgsState == "REFRACTORY_PERIOD") {
                colorCss = '"color:#00FFFF !important"';
            }
            else if (pLgsState == "MONITORING") {
                colorCss = '"color:#00FFFF !important"';
            }
            else if ((pLgsState == "SUSPEND_FIRED_PLGM" || pLgsState == "SUSPEND_FIRED_LGS") && pSuspendState == true) {
                colorCss = '"color:#00FFFF !important"';
            }
        }
        return colorCss == '' ? '' : (' style=' + colorCss + ' ');
    },
    /*Change implemented by Zimetrics*/
    /*FG20-FSG10-FR10-TR10-SS1 - Trend Arrows color change as per Therapy Icons*/
    statusTherapyIconsColor: function () {
        var jsonData = $.cpmAppJsonData;
        if (!jsonData || isInfoUnavailable) {
            clearInterval(stopPumpBanner);
            return null;
        }
        var autoModeActive = $('#autoModeActive');
        var tsi = jsonData['therapyAlgorithmState'];
        var pSuspendState = jsonData['medicalDeviceSuspended'];
        var tsiStatusMessage = jsonData['systemStatusMessage'];
        var autoShieldState = tsi != null && tsi != undefined ? tsi.autoModeShieldState : "";
        var pLgsState = tsi != null && tsi != undefined ? tsi.plgmLgsState : "";
        pSuspendState = pSuspendState != null && pSuspendState != undefined ? pSuspendState : "";
        tsiStatusMessage = tsiStatusMessage != null && tsiStatusMessage != undefined ? tsiStatusMessage : "";
        autoShieldState = autoShieldState != null && autoShieldState != undefined ? autoShieldState : "";
        pLgsState = pLgsState != null && pLgsState != undefined ? pLgsState : "";
        if (tsiStatusMessage == "NO_ERROR_MESSAGE" || tsiStatusMessage == "NO_DATA_FROM_PUMP") {
            if (autoShieldState == "SAFE_BASAL" && pLgsState == "FEATURE_OFF" && pSuspendState == false) {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#FFFFFF !important', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#FFFFFF !important' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#FFFFFF');
            }
            else if (autoShieldState == "FEATURE_OFF" && pLgsState == "REFRACTORY_PERIOD") {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#00FFFF', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#00FFFF' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
            }
            else if (autoShieldState == "FEATURE_OFF" && pLgsState == "MONITORING") {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#00FFFF', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#00FFFF' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
            }
            else if (autoShieldState == "FEATURE_OFF"
                && (pLgsState == "SUSPEND_FIRED_PLGM" || pLgsState == "SUSPEND_FIRED_LGS") && pSuspendState == true) {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#00FFFF', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#00FFFF' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
            }
            else if ((autoShieldState == "AUTO_BASAL" || autoShieldState == "SAFE_BASAL")
                && pLgsState == "FEATURE_OFF" && pSuspendState == true) {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#FFFFFF !important', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#FFFFFF !important' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#FFFFFF');
            }
            else if (autoShieldState == "AUTO_BASAL" && pLgsState == "FEATURE_OFF" && pSuspendState == false) {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#FFFFFF !important', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#FFFFFF !important' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#FFFFFF');
            }
            else if (pLgsState == "REFRACTORY_PERIOD") {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#00FFFF', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#00FFFF' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
            }
            else if (pLgsState == "MONITORING") {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#00FFFF', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#00FFFF' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
            }
            else if ((pLgsState == "SUSPEND_FIRED_PLGM" || pLgsState == "SUSPEND_FIRED_LGS") && pSuspendState == true) {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    $('.trend-and-value .sensor-value').css({ 'color': '#00FFFF', 'position': 'relative' });
                }
                else {
                    $('.trend-and-value .sensor-value').css({ 'float': 'left', 'color': '#00FFFF' });
                }
                $('.trend-and-value .trend-icon').css('background-color', '#00FFFF');
            }
        }
    },
    /*showShadedPortion: function(){
        var jsonData = $.cpmAppJsonData;
        if (!jsonData) {
            return null;
        }

        var exists = function(propertyName) {
                return jsonData.hasOwnProperty(propertyName);
        };

        if (!exists('markers')) { // object array
            return null;
        }

        var markers = jsonData['markers'];
        for(var i = 0; i < markers.length; i++){
            var marker = markers[i];
            switch(marker.type) {
            case 'LOW_GLUCOSE_SUSPENDED':
                var offset = (288 - marker.index) * 1.7 + 5;
                var div = '<div id="shadedPortion" style="left: ' + offset + 'px;width: 1.7px;background-color: orange;height: 354px;z-index: 5;position: absolute;top: 30px;opacity: 0.50;">&nbsp;</div>';
                var div2 = $("#bg-diagram");
                var htmlstr = div2.html();
                div2.html(htmlstr + div);
            }
        }
    },*/
    /*Change implemented by Zimetrics*/
    /*FG20-FSG10-FR10-TR10-SS1 - Pump Banner States and its display function*/
    updatePumpBannerState: function () {
        var dualBolus = this.res('Npump.banner.state.bolus.dual');
        var squareBolus = this.res('Npump.banner.state.bolus.square');
        var loadReservoir = this.res('Npump.banner.state.reservoir.load');
        var suspendedOnLow = this.res('Npump.banner.state.suspended.low');
        var suspendedBeforeLow = this.res('Npump.banner.state.suspended.before.low');
        var deliverySuspended = this.res('Npump.banner.state.suspended.delivery');
        var bgRequired = this.res('Npump.banner.state.bg.required');
        var processingBg = this.res('Npump.banner.state.bg.processing');
        var waitToEnterBg = this.res('Npump.banner.state.bg.wait.enter');
        var tempTarget = this.res('Npump.banner.state.temp.target');
        var tempBasal = this.res('Npump.banner.state.temp.basal');
        var noDeliveryCheckPump = this.res('Npump.banner.state.no.delivery');
        var calibrationRequired = this.res('Nstatus.calibration.required');
        var tUnits = this.res('TimeHrUnits');
        var jsonData = $.cpmAppJsonData;
        var pumpBannerState = $('#pumpBannerState');
        var pumpBannerStateMobile = $('#pumpBannerStateMobile');
        var msgStatusMessage = jsonData.systemStatusMessage;
        if (!jsonData || isInfoUnavailable) {
            clearInterval(stopPumpBanner);
            pumpBannerState.css({ 'display': 'none' });
            pumpBannerStateMobile.css({ 'display': 'none' });
            return null;
        }
        var pbs = jsonData['pumpBannerState'];
        var len = Array.isArray(pbs) ? pbs.length : 0;
        var count = 0;
        var showPumpBannerState = function () {
            var pbs = jsonData['pumpBannerState'];
            var len = Array.isArray(pbs) ? pbs.length : 0;
            if (isInfoUnavailable || len == 0) {
                pumpBannerState.attr('style', 'display:none;');
                pumpBannerState.html('');
                clearInterval(stopPumpBanner);
                return;
            }
            var stateType = pbs[count].type;
            var stateTypeMobile = pbs[count].type;
            var remainTime = pbs[count].timeRemaining;
            var formatToDisplay;
            var hours = (remainTime / 60);
            var rhours = Math.floor(hours);
            var minutes = (hours - rhours) * 60;
            var rminutes = Math.round(minutes);
            if (remainTime < 0 || remainTime > 1440) {
                formatToDisplay = ':' + '---';
            }
            else if (remainTime < 10) {
                formatToDisplay = '00:0' + remainTime;
            }
            else if (remainTime >= 10 && remainTime < 60) {
                formatToDisplay = '00:' + remainTime;
            }
            else if (remainTime <= 540) {
                if (rminutes >= 10) {
                    formatToDisplay = '0' + rhours + ':' + rminutes;
                }
                else {
                    formatToDisplay = '0' + rhours + ':' + '0' + rminutes;
                }
            }
            else if (remainTime > 540 && remainTime <= 1440) {
                if (rminutes >= 10 && rhours >= 10) {
                    formatToDisplay = rhours + ':' + rminutes;
                }
                else if (rminutes >= 10 && rhours < 10) {
                    formatToDisplay = '0' + rhours + ':' + rminutes;
                }
                else if (rminutes < 10 && rhours >= 10) {
                    formatToDisplay = rhours + ':' + '0' + rminutes;
                }
                else if (rminutes < 10 && rhours < 10) {
                    formatToDisplay = '0' + rhours + ':' + '0' + rminutes;
                }
                else {
                    formatToDisplay = rhours + ':' + rminutes;
                }
            }
            if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                switch (stateType) {
                    case 'DUAL_BOLUS':
                        pumpBannerState.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(dualBolus + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'SQUARE_BOLUS':
                        pumpBannerState.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(squareBolus + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'LOAD_RESERVOIR':
                        pumpBannerState.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(loadReservoir);
                        break;
                    case 'SUSPENDED_ON_LOW':
                        pumpBannerState.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(suspendedOnLow);
                        break;
                    case 'SUSPENDED_BEFORE_LOW':
                        pumpBannerState.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(suspendedBeforeLow);
                        break;
                    case 'DELIVERY_SUSPEND':
                        pumpBannerState.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(deliverySuspended);
                        break;
                    case 'BG_REQUIRED':
                        pumpBannerState.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(bgRequired);
                        break;
                    case 'PROCESSING_BG':
                        pumpBannerState.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(processingBg);
                        break;
                    case 'WAIT_TO_ENTER_BG':
                        pumpBannerState.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(waitToEnterBg);
                        break;
                    case 'TEMP_TARGET':
                        pumpBannerState.attr('style', 'display:block;background:#00FF00;color:black;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(tempTarget + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'TEMP_BASAL':
                        pumpBannerState.attr('style', 'display:block;background:#00FF00;color:black;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(tempBasal + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'NO_DELIVERY':
                        pumpBannerState.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(noDeliveryCheckPump);
                        break;
                    case 'CALIBRATION_REQUIRED':
                        pumpBannerState.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;');
                        pumpBannerState.addClass("cpm-page-pumpBanner");
                        pumpBannerState.html(calibrationRequired);
                        break;
                    default:
                        pumpBannerState.attr('style', 'display:none;');
                        pumpBannerState.html('');
                        if (stopPumpBanner != null) {
                            clearInterval(stopPumpBanner);
                        }
                }
            }
            else {
                switch (stateTypeMobile) {
                    case 'DUAL_BOLUS':
                        pumpBannerStateMobile.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(dualBolus + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'SQUARE_BOLUS':
                        pumpBannerStateMobile.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(squareBolus + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'LOAD_RESERVOIR':
                        pumpBannerStateMobile.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(loadReservoir);
                        break;
                    case 'SUSPENDED_ON_LOW':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(suspendedOnLow);
                        break;
                    case 'SUSPENDED_BEFORE_LOW':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(suspendedBeforeLow);
                        break;
                    case 'DELIVERY_SUSPEND':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(deliverySuspended);
                        break;
                    case 'BG_REQUIRED':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(bgRequired);
                        break;
                    case 'PROCESSING_BG':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(processingBg);
                        break;
                    case 'WAIT_TO_ENTER_BG':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(waitToEnterBg);
                        break;
                    case 'TEMP_TARGET':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#00FF00;color:black;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(tempTarget + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'TEMP_BASAL':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#00FF00;color:black;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(tempBasal + ' ' + formatToDisplay + ' ' + tUnits);
                        break;
                    case 'NO_DELIVERY':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#FF0000;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(noDeliveryCheckPump);
                        break;
                    case 'CALIBRATION_REQUIRED':
                        pumpBannerStateMobile.attr('style', 'display:block;background:#9B9B9B;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                        pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                        pumpBannerStateMobile.html(calibrationRequired);
                        break;
                    default:
                        pumpBannerStateMobile.attr('style', 'display:none;');
                        pumpBannerStateMobile.html('');
                        if (stopPumpBanner != null) {
                            clearInterval(stopPumpBanner);
                        }
                }
            }
            var flagLoadReservoir = false;
            var flagSuspendOnLow = false;
            var flagSuspendBeforeLow = false;
            var flagDeliverySuspend = false;
            var flagBGRequired = false;
            var flagProcessingBG = false;
            var flagWaitToEnterBG = false;
            var flagCalibrationRequired = false;
            for (i = 0; i < len; i++) {
                if (pbs[i].type == 'LOAD_RESERVOIR') {
                    flagLoadReservoir = true;
                }
                if (pbs[i].type == 'SUSPENDED_ON_LOW') {
                    flagSuspendOnLow = true;
                }
                if (pbs[i].type == 'SUSPENDED_BEFORE_LOW') {
                    flagSuspendBeforeLow = true;
                }
                if (pbs[i].type == 'DELIVERY_SUSPEND') {
                    flagDeliverySuspend = true;
                }
                if (pbs[i].type == 'BG_REQUIRED') {
                    flagBGRequired = true;
                }
                if (pbs[i].type == 'PROCESSING_BG') {
                    flagProcessingBG = true;
                }
                if (pbs[i].type == 'WAIT_TO_ENTER_BG') {
                    flagWaitToEnterBG = true;
                }
                if (pbs[i].type == 'CALIBRATION_REQUIRED') {
                    flagCalibrationRequired = true;
                }
            }
            if (flagLoadReservoir == true && (flagSuspendOnLow == true || flagSuspendBeforeLow == true || flagDeliverySuspend == true)) {
                if (!(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))) {
                    pumpBannerState.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;');
                    pumpBannerState.addClass("cpm-page-pumpBanner");
                    pumpBannerState.html(loadReservoir);
                }
                else {
                    pumpBannerStateMobile.attr('style', 'display:block;color:black;background:#00FFFF;width:100%;height:25px;padding-top:5px;text-align:center;clear:both;');
                    pumpBannerStateMobile.addClass("cpm-page-pumpBanner");
                    pumpBannerStateMobile.html(loadReservoir);
                }
            }
            if ((flagBGRequired == true || flagProcessingBG == true || flagWaitToEnterBG == true || flagCalibrationRequired == true) && msgStatusMessage != "NO_ERROR_MESSAGE") {
                pumpBannerStateMobile.attr('style', 'display:none;');
                pumpBannerStateMobile.html('');
                pumpBannerState.attr('style', 'display:none;');
                pumpBannerState.html('');
            }
            if (count + 1 < len) {
                count++;
            }
            else {
                count = 0;
            }
        };
        if (len > 0) {
            if (isInfoUnavailable) {
                clearInterval(stopPumpBanner);
                return;
            }
            if (stopPumpBanner != null && stopPumpBanner != undefined)
                clearInterval(stopPumpBanner);
            showPumpBannerState();
            if (len > 1)
                stopPumpBanner = setInterval(showPumpBannerState, 3000);
        }
    },
    /*End: This Code is implemented by Zimetrics*/
    /**
     * Set Trend icon to show up or down arrow by changing the background of the HTML element.
     * @param {String} trendValue String, possible values: 'UP', 'DOWN', 'UPDOUBLE', 'DOWNDOUBLE'.
     */
    updateTrendIcon: function (data) {
        var trendIcon = $('.trend-and-value .trend-icon');
        trendIcon.removeClass('trend-down trend-down-double trend-up trend-up-double trend-up-triple trend-down-triple off');
        if (!data.sensorInRange) {
            return;
        }
        var trendValue = data.lastSGTrend;
        //var trendValue = 'UP';
        switch (trendValue) {
            case 'UP':
                trendIcon.addClass('trend-up');
                break;
            case 'DOWN':
                trendIcon.addClass('trend-down');
                break;
            case 'UP_DOUBLE':
                trendIcon.addClass('trend-up-double');
                break;
            case 'DOWN_DOUBLE':
                trendIcon.addClass('trend-down-double');
                break;
            case 'UP_TRIPLE':
                trendIcon.addClass('trend-up-triple');
                break;
            case 'DOWN_TRIPLE':
                trendIcon.addClass('trend-down-triple');
                break;
            default:
                trendIcon.addClass('off');
        }
    },
    /**
     * Automatically fix some layout issues which can't be handled with CSS code.
     * Force chart redraw to make it 100% wide.
     * @param {Object} event Event object referencing the application via event.data.
     */
    onWindowResize: function (event) {
        var cpmApp = event.data;
        cpmApp.fixPageLayout();
        cpmApp.updateChart(cpmApp);
    },
    /**
     * Event handler for time range select on time range button bar.
     * Highlights the active button on bar.
     * Forces chart redraw to display the data for selected time range.
     */
    onTimeRangeSelected: function (event) {
        var cpmApp = event.data;
        var target = $(event.target);
        cpmApp.global.iHoursSelected = parseInt(target.text()); // TODO store number value in data-range field.
        if (cpmApp.global.oSelectedRangeButton) {
            cpmApp.global.oSelectedRangeButton.toggleClass('ui-selected');
        }
        target.toggleClass('ui-selected');
        cpmApp.global.oSelectedRangeButton = target;
        cpmApp.updateChart(cpmApp);
    },
    /**
     * Shorthand function for replacing element's HTML with localized value.
     * @param {String} elementId The ID of DOM element to modify.
     * @param {String} resourceId The ID of localized string entity to use.
     */
    localize: function (elementId, resourceId) {
        $(elementId).html(this.res(resourceId));
    },
    localizeByTextAttr: function (resourceId) {
        this.localize('span[text="' + resourceId + '"]', resourceId);
    },
    /**
     * Handle application errors by showing localized Error page with message.
     * Used to show error messages related to invalid or missing JSON data etc.
     * Remebmer the last app page before error for recovery in case there's no more errors.
     * @param {String} sErrorType Human-readable type of the error, like 'JSON Error'.
     * @param {Object|String} oDetails Error details text.
     */
    displayErrorState: function (sErrorType, oDetails, isMessage) {
        // Save the ID of last app page before error (if it's not saved).
        if ($.cpmAppLastPageBeforeError == undefined) {
            $.cpmAppLastPageBeforeError = $('.ui-page-active').attr('id');
        }
        $.mobile.changePage('#page-error', {
            transition: 'none',
            changeHash: false
        });
        // we have to show a message to the user rather than an error
        if (isMessage) {
            this.localize('.header h1', 'Connect Monitor');
            this.localize('.error-section h1', 'Access Denied');
            this.localize('.error-section p.static-info', oDetails);
            $('#page-error .error-title').text('');
            $('#page-error .error-text').html('');
        }
        else {
            this.localize('.header h1', 'Connect Monitor');
            this.localize('.error-section h1', 'Error occured!');
            this.localize('.error-section p.static-info', 'Connect Monitor Error');
            $('#page-error .error-title').text(this.res('Error details'));
            $('#page-error .error-text').html('<b>' + this.res('Error type:') + '</b> ' + sErrorType + '<br /><br /><b>' + this.res('Error details:') + '</b> ' + oDetails);
        }
    },
    // Data handling functions
    /**
     * Start loading of last 24 hours JSON data, add success and error handler.
     * @param {Object} cpmApp Reference to the CPM application instance.
     */
    loadJsonData: function (cpmApp) {
        // If we're already trying to load the JSON data, just let that one finish.
        if ($.cpmApp.isLoadingJson == true) {
            return;
        }
        // if cp was susspended by patient, we wont send request;
        if (status === 'SUSPENDED') {
            $.cpmApp.displayErrorState('', 'Account Suspended', true);
            return;
        }
        //local url
        //var url = cpmApp.global.jsonDataUri + '?cpSerialNumber=' + cpSerialNumber + '&msgType=last24hours&requestTime=' + new Date().getTime();
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR20-SS1 - Remote Monitor API Integration Dev Endpoint URL*/
        //dev url
        //var url ="https://t9gvzgj694.execute-api.eu-central-1.amazonaws.com/dev/connect/v1/display/message";
        //Int-Test url
        var url = countrySettings.blePereodicDataEndpoint;
        var token = readCookie('auth_tmp_token') || localStorage.getItem('dev_token');
        var headers = {
            'Content-Type': 'application/json'
        };
        if (token) {
            headers['Authorization'] = 'Bearer ' + token;
        }
        if (cpmApp.global.isDebugMode) {
            url = cpmApp.global.jsonDataUriDebug + '-' + cpmApp.global.debugFileCounter + '.json';
            if (cpmApp.global.debugFileCounter == cpmApp.global.debugFileCounterMax) {
                cpmApp.global.debugFileCounter = -1;
            }
            cpmApp.global.debugFileCounter++;
        }
        $.cpmApp.isLoadingJson = true;
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR20-SS1 - Remote Monitor API Integration updates made to ajax call*/
        $.ajax({
            url: url,
            dataType: 'json',
            contentType: 'application/json',
            headers: headers,
            crossDomain: true,
            //username: 'JWT',
            //origin:'http://103.97.241.39:7001',
            //password: '',
            /*Change implemented by Zimetrics*/
            /*FG20-FSG10-FR10-TR20-SS1 - Remote Monitor API Integration updates made for type and data attributes*/
            type: 'POST',
            data: JSON.stringify({ "username": patientUsername, "role": patientRole }),
            error: function (jqXHR, textStatus, errorThrown) {
                $.cpmAppDataOk = false;
                $.cpmApp.isLoadingJson = false;
                $.lastUpdateAttemptTimeMillis = (new Date()).getTime();
                if (jqXHR.status == 401) {
                    // session expired. redirect to login page
                    // window with top because we need redirect not only iframe but the whole page
                    window.top.location = $.cpmApp.global.loginUri;
                }
                else if (jqXHR.status == 403 && jqXHR.responseText && jqXHR.responseText.indexOf('Authorization failure') !== -1) {
                    window.top.location = $.cpmApp.global.logoutUri;
                }
                else if (jqXHR.status == 410) {
                    // Gone
                    // user has been marked delete by the CP
                    cpmApp.displayErrorState(textStatus, 'Account Deleted', true);
                }
                else if ((jqXHR.status == 403) && (patientRole !== 'patient')) {
                    //unauthorized
                    //User has no permissons to see monitor
                    cpmApp.displayErrorState(textStatus, 'Account Suspended', true);
                }
                else if (jqXHR.status == 204) {
                    //No data in DB
                    //User has logged in first time
                    cpmApp.displayErrorState(textStatus, 'No Data in DB', true);
                }
                else {
                    //unexpected
                    // Server is down? Change the threshold for the update interval to one minute
                    $.cpmApp.global.iUpdateInterval = $.cpmApp.global.oneMinute;
                    cpmApp.displayErrorState(textStatus, jqXHR.responseText, errorThrown);
                }
            },
            success: function (data) {
                $.cpmApp.isLoadingJson = false;
                $.lastUpdateAttemptTimeMillis = (new Date()).getTime();
                // Set update interval threshold to five minutes
                $.cpmApp.global.iUpdateInterval = $.cpmApp.global.fiveMinutes;
                $.cpmAppDataOk = true;
                $.cpmAppJsonData = data;
                // BLE Connect determines data availability by internal mechanisms, no need for data search algorithm
                connectDataUpdated(true);
                cpmApp.validateLoadedJsonData();
            }
        });
    },
    /**
     * Before parsing and showing the last 24 hours JSON data, validate it.
     * Parse and show the updated JSON data if it is valid.
     * Show the error page with message if JSON wasn't loaded or corrupted.
     *
     * May ignore JSON parsing errors if the cpmApp.global.ignoreJsonErrors is true.
     */
    validateLoadedJsonData: function () {
        var error = this.checkJsonDataIntegrity($.cpmAppJsonData);
        if (this.global.ignoreJsonErrors || error.type == this.errorType.none) {
            this.parseJsonData();
            this.updateDisplay();
        }
        else {
            error.details += '<br />JSON:' + JSON.stringify($.cpmAppJsonData, null, 2);
            this.displayErrorState(error.type, error.details);
        }
    },
    /**
     * Validate each value from loaded JSON data to make sure it's not corrupted.
     * @param {Object} jData Loaded last 24 hours JSON data.
     * @returns {Object} Error object with details on possible errors found.
     */
    checkJsonDataIntegrity: function (jData) {
        var errMsg = ' value is missing in the JSON object. ';
        var oError = {
            type: this.errorType.none,
            details: ''
        };
        if (!jData) {
            oError.type = this.errorType.jsonError;
            oError.details = 'No JSON data';
            return oError;
        }
        var exists = function (propertyName) {
            return jData.hasOwnProperty(propertyName);
        };
        if (!exists('firstName') || jData.firstName == '') {
            oError.type = this.errorType.jsonError;
            oError.details += 'firstName' + errMsg;
        }
        if (!exists('lastName') || jData.lastName == '') {
            oError.type = this.errorType.jsonError;
            oError.details += 'lastName' + errMsg;
        }
        if (!exists('currentServerTime') || isNaN(jData.currentServerTime)) { // integer
            oError.type = this.errorType.jsonError;
            oError.details += 'currentServerTime' + errMsg;
        }
        if (!exists('lastConduitUpdateServerTime') || isNaN(jData.lastConduitUpdateServerTime)) {
            oError.type = this.errorType.jsonError;
            oError.details += 'lastConduitUpdateServerTime' + errMsg;
        }
        if (!exists('conduitBatteryLevel') || isNaN(jData.conduitBatteryLevel)) {
            oError.type = this.errorType.jsonError;
            oError.details += 'conduitBatteryLevel' + errMsg;
        }
        if (!exists('conduitBatteryStatus') || jData.conduitBatteryStatus == '') {
            oError.type = this.errorType.jsonError;
            oError.details += 'conduitBatteryStatus' + errMsg;
        }
        if (!exists('conduitInRange')) {
            oError.type = this.errorType.jsonError;
            oError.details += 'conduitInRange' + errMsg;
        }
        if (!exists('reservoirLevelPercent') || isNaN(jData.reservoirLevelPercent)) { // integer
            oError.type = this.errorType.jsonError;
            oError.details += 'reservoirLevelPercent' + errMsg;
        }
        if (!exists('reservoirAmount') || isNaN(jData.reservoirAmount)) { // integer
            oError.type = this.errorType.jsonError;
            oError.details += 'reservoirAmount' + errMsg;
        }
        if (!exists('medicalDeviceBatteryLevelPercent') || isNaN(jData.medicalDeviceBatteryLevelPercent)) { // integer
            oError.type = this.errorType.jsonError;
            oError.details += 'medicalDeviceBatteryLevelPercent' + errMsg;
        }
        if (!exists('conduitMedicalDeviceInRange')) { // boolean
            oError.type = this.errorType.jsonError;
            oError.details += 'conduitMedicalDeviceInRange' + errMsg;
        }
        if (!exists('sensorState')) { //enum string
            oError.type = this.errorType.jsonError;
            oError.details += 'sensorState' + errMsg;
        }
        if (!exists('calibStatus')) {
            oError.type = this.errorType.jsonError;
            oError.details += 'calibStatus' + errMsg;
        }
        if (!exists('sensorDurationHours') || isNaN(jData.sensorDurationHours)) { // integer
            oError.type = this.errorType.jsonError;
            oError.details += 'sensorDurationHours' + errMsg;
        }
        if (!exists('timeToNextCalibHours') || isNaN(jData.timeToNextCalibHours)) { // integer
            oError.type = this.errorType.jsonError;
            oError.details += 'timeToNextCalibHours' + errMsg;
        }
        if (!exists('conduitSensorInRange')) { // boolean
            oError.type = this.errorType.jsonError;
            oError.details += 'conduitSensorInRange' + errMsg;
        }
        if (!exists('sMedicalDeviceTime') || jData.sMedicalDeviceTime == '') { // string datetime
            oError.type = this.errorType.jsonError;
            oError.details = 'sMedicalDeviceTime' + errMsg;
        }
        if (!exists('medicalDeviceFamily') || jData.medicalDeviceFamily == '') {
            oError.type = this.errorType.jsonError;
            oError.details += 'medicalDeviceFamily' + errMsg;
        }
        if (!exists('bgUnits') || jData.bgUnits == '') { // string, sample: 'MGDL'
            oError.type = this.errorType.jsonError;
            oError.details += 'bgUnits' + errMsg;
        }
        if (!exists('lastSG') || !jData.lastSG.hasOwnProperty('sg') || isNaN(jData.lastSG.sg)) {
            oError.type = this.errorType.jsonError;
            oError.details += 'lastSG' + errMsg;
        }
        if (!exists('lastSGTrend') || jData.lastSGTrend == '') { // string like 'UP', 'DOWN', 'UPDOUBLE', 'DOWNDOUBLE'
            oError.type = this.errorType.jsonError;
            oError.details += 'lastSGTrend' + errMsg;
        }
        if (!exists('lastAlarm') || !jData.lastAlarm.hasOwnProperty('code')) {
            oError.type = this.errorType.jsonError;
            oError.details += 'lastAlarm' + errMsg;
        }
        if (exists('lastAlarm') && jData.lastAlarm.code > 0 && (!jData.lastAlarm.hasOwnProperty('datetime') || !jData.lastAlarm.hasOwnProperty('flash'))) {
            oError.type = this.errorType.jsonError;
            oError.details += 'lastAlarm' + ' has invalid data';
        }
        if (!exists('timeFormat') || jData.timeFormat == '') { // string like '12HR' or '24HR'
            oError.type = this.errorType.jsonError;
            oError.details += 'timeFormat' + errMsg;
        }
        if (!exists('sLastSensorTime') || jData.sLastSensorTime == '') { //string datetime
            oError.type = this.errorType.jsonError;
            oError.details += 'slastSensorTime' + errMsg;
        }
        if (!exists('sgs') || jData.sgs.length != 288) { // object array
            oError.type = this.errorType.jsonError;
            oError.details += 'sgs value' + errMsg;
        }
        /* Commented for BLE-NGP */
        /*if (jData.deviceFamily == 'NGP'){
            if (!exists('activeInsulin')) { // object
                oError.type = this.errorType.jsonError;
                oError.details += 'activeInsulin'  + errMsg;
            }
  
            if (!exists('lastBolus')) { // object
                oError.type = this.errorType.jsonError;
                oError.details += 'lastBolus' + errMsg;
            }
  
            if (!exists('medicalDeviceSuspended')) {
                oError.type = this.errorType.jsonError;
                oError.details += 'medicalDeviceSuspended' + errMsg;
            }
        }*/
        return oError;
    },
    exactPrecision: function (number, precision) {
        return number.toPrecision(precision).replace(new RegExp("((\\d\\.*){" + precision + "}).*"), '$1');
    },
    /** After last 24 hours JSON data is loaded, it's parsed to fields of
     * this.parsedData object.
     */
    parseJsonData: function () {
        var jsonData = $.cpmAppJsonData;
        if (!jsonData) {
            return null;
        }
        var pd = this.parsedData; // use temporary variable to make statements small.
        pd.lastConduitMessageTS = jsonData.lastConduitUpdateServerTime;
        pd.currentServerTime = jsonData.currentServerTime;
        pd.timeSinceServerReceivedLastMessage = jsonData.currentServerTime - jsonData.lastConduitUpdateServerTime;
        //Name
        pd.firstname = jsonData.firstName;
        pd.surname = jsonData.lastName;
        // BG Units
        pd.jsonBGUnits = jsonData.bgUnits;
        pd.bgUnits = this.res(jsonData.bgUnits);
        // get the time format required to format date and time display
        if (jsonData.timeFormat == "HR_24") {
            pd.timeFormat = "HR_24";
        }
        else {
            pd.timeFormat = "HR_12";
        }
        pd.deviceFamily = jsonData.medicalDeviceFamily;
        pd.deviceSerialNumber = jsonData.medicalDeviceSerialNumber;
        /*Change implemented by Zimetrics*/
        /*FG20-FSG10-FR10-TR10-SS1 - json values acquired for below fields*/
        pd.systemStatusMessage = jsonData.systemStatusMessage;
        pd.pumpCommunicationState = jsonData.pumpCommunicationState;
        pd.gstCommunicationState = jsonData.gstCommunicationState;
        var msgBasal = jsonData['basal'];
        if (msgBasal) {
            pd.tempBasalRate = msgBasal.tempBasalRate;
            pd.presetTempName = msgBasal.presetTempName;
            pd.tempBasalType = msgBasal.tempBasalType;
            pd.tempBasalPercentage = msgBasal.tempBasalPercentage;
            pd.basalRate = msgBasal.basalRate;
            pd.activeBasalPattern = msgBasal.activeBasalPattern;
        }
        function newDate(value) {
            var field = value.match(/^([+-]?\d{4}(?!\d\d\b))(?:-?(?:(0[1-9]|1[0-2])(?:-?([12]\d|0[1-9]|3[01]))?)(?:[T\s](?:(?:([01]\d|2[0-3])(?::?([0-5]\d))?|24\:?00)([.,]\d+(?!:))?)?(?::?([0-5]\d)(?:[.,](\d+))?)?([zZ]|([+-](?:[01]\d|2[0-3])):?([0-5]\d)?)?)?)?$/) || [];
            var result = new Date(field[1], field[2] - 1 | 0, field[3] || 1, field[4] | 0, field[5] | 0, field[7] | 0, field[8] | 0);
            if (field[9]) {
                result.setUTCMinutes(result.getUTCMinutes() - result.getTimezoneOffset() - ((field[10] * 60 + +field[11]) || 0));
            }
            return result;
        }
        // Last SG Value
        var lastSG = jsonData['lastSG'];
        pd.lastValue = this.getBGValue(lastSG.sg);
        if (typeof (lastSG.datetime) != "undefined" && lastSG.datetime != '') {
            var lastSGDate = newDate(lastSG.datetime.substring(0, 23));
            pd.lastValueDate = this.getLongerDateString(lastSGDate);
            pd.lastValueTime = this.getTimeString(lastSGDate);
        }
        pd.lastSensorState = lastSG.sensorState;
        // lastSGTrend
        pd.lastSGTrend = jsonData['lastSGTrend'];
        // Last Monitor UpdateTime from local client
        var updatedDate = new Date();
        pd.sUpdatedDate = this.getDateString(updatedDate);
        pd.sUpdatedDateLonger = this.getLongerDateString(updatedDate);
        pd.sUpdatedTime = this.getTimeString(updatedDate);
        var oLastAlarm = jsonData['lastAlarm'];
        pd.sLastAlarmDate = '';
        pd.sLastAlarmTime = '';
        if (typeof (oLastAlarm.datetime) != "undefined" && oLastAlarm.datetime != '') {
            var lastAlarmTime = newDate(oLastAlarm.datetime.substring(0, 23)); // some versions may not have alarm times
            pd.sLastAlarmDate = this.getLongerDateString(lastAlarmTime);
            pd.sLastAlarmTime = this.getTimeString(lastAlarmTime);
        }
        if (pd.deviceFamily == 'GUARDIAN') {
            pd.sLastAlarmCode = oLastAlarm.kind; // guardain has string codes
        }
        else {
            if (pd.deviceFamily == 'NGP') {
                var code = oLastAlarm.code;
                if (code < 10) {
                    pd.sLastAlarmCode = '00' + code;
                }
                else if (code < 100) {
                    pd.sLastAlarmCode = '0' + code;
                }
                else {
                    pd.sLastAlarmCode = '' + code;
                }
            }
            else {
                pd.sLastAlarmCode = oLastAlarm.code;
            }
        }
        pd.sLastAlarmType = oLastAlarm.type;
        pd.sLastAlarmInfo = oLastAlarm.info;
        pd.bLastAlarmFlash = oLastAlarm.flash;
        // Status screen data
        // Status - Sensor
        pd.sensorCalibrationTime = parseInt(jsonData['timeToNextCalibHours']);
        pd.sensorDaysToChange = this.sensorHoursToDays(jsonData['sensorDurationHours']);
        pd.sensorHoursToChange = jsonData['sensorDurationHours'];
        pd.sensorDurationMinutes = jsonData['sensorDurationMinutes'];
        pd.timeToNextCalibrationMinutes = jsonData['timeToNextCalibrationMinutes'];
        pd.sensorInRange = jsonData['conduitSensorInRange'];
        pd.sensorState = jsonData['sensorState'];
        pd.calibStatus = jsonData['calibStatus'];
        // Status - medical device
        pd.pumpResLevelPercent = parseInt(jsonData['reservoirLevelPercent']);
        pd.pumpResAmount = parseInt(jsonData['reservoirAmount']);
        pd.reservoirRemainingUnits = parseFloat(jsonData['reservoirRemainingUnits']);
        pd.medicalDeviceBattery = parseInt(jsonData['medicalDeviceBatteryLevelPercent']);
        pd.medicalDeviceInRange = jsonData['conduitMedicalDeviceInRange'];
        // Status - Conduit
        pd.conduitInRange = jsonData['conduitInRange'];
        pd.conduitBatteryLevel = parseInt(jsonData['conduitBatteryLevel']);
        pd.conduitBatteryStatus = jsonData['conduitBatteryStatus'];
        pd.conduitGSMSignalLevel = jsonData['conduitGSMSignalLevel'];
        pd.conduitGSMSignalBars = jsonData['conduitGSMSignalBars'];
        if (!pd.conduitInRange) {
            pd.appStatus = "CONDUIT_BAD";
        }
        else if (!pd.sensorInRange && pd.deviceFamily == 'GUARDIAN') { // for guardian sensor is like the conduit
            pd.appStatus = "CONDUIT_BAD";
        }
        else if (!pd.medicalDeviceInRange && pd.deviceFamily != 'GUARDIAN') {
            pd.appStatus = this.res('remove.MEDICAL_DEVICE_BAD'); // only for pumps
        }
        else if (!pd.sensorInRange) {
            pd.appStatus = "SENSOR_BAD";
        }
        else {
            pd.appStatus = "ALL_GOOD";
        }
        pd.deviceTime = new Date(jsonData['sMedicalDeviceTime']).getTime();
        if (jsonData['sLastSensorTime'] != '') {
            pd.lastSensorTSString = jsonData['sLastSensorTime'].substring(0, 23);
            pd.lastSensorTS = new Date(jsonData['sLastSensorTime'].substring(0, 23)).getTime();
        }
        if (jsonData['limits'] == null) {
            pd.limits = [];
        }
        else {
            pd.limits = jsonData['limits'];
        }
        pd.highLimits = [];
        pd.lowLimits = [];
        pd.lowGlucoseSuspends = [];
        pd.unfilteredEventMarkers = jsonData['markers'];
        var oActiveInsulin = jsonData['activeInsulin'];
        var oPrecision = 2;
        switch (oActiveInsulin.precision) {
            case 'TENTHS':
                oPrecision = 2;
                break;
            case 'HUNDREDTHS':
                oPrecision = 3;
                break;
            case 'THOUSANDS':
                oPrecision = 4;
                break;
            default:
                oPrecision = 2;
                break;
        }
        var activeInsulinTime = new Date(oActiveInsulin.datetime);
        pd.sActiveInsulinDate = this.getLongerDateString(activeInsulinTime);
        pd.sActiveInsulinTime = this.getTimeString(activeInsulinTime);
        pd.sActiveInsulinAmount = oActiveInsulin.amount;
        pd.sPrecision = oPrecision;
        /* Commented for BLE-NGP */
        /*if (pd.deviceFamily == 'NGP'){//NGP specific items
            var oLastBolus = jsonData['lastBolus'];
            var lastBolusTime = new Date(oLastBolus.datetime);
            pd.sLastBolusDate = this.getLongerDateString(lastBolusTime);
            pd.sLastBolusTime = this.getTimeString(lastBolusTime);
            pd.sLastBolusAmount = oLastBolus.amount;
            pd.sLastBolusDuration = oLastBolus.duration;
            pd.sLastBolusType = oLastBolus.type;
            pd.sLastBolusSts = pd.sLastBolusTime + ' ' + this.getDateString(lastBolusTime);
  
            pd.pumpSuspended = jsonData['medicalDeviceSuspended'];
        }*/
        pd.sgs = jsonData['sgs'];
        this.parsedData = pd;
    },
    /**
     * Parse Blood Glucose and its limits chart data from the loaded
     * last 24 hours JSON data.
     * Chart can display values for 3, 6, 12 and 24 hours.
     * @param {Number} iHours The time range in hours to get values for.
     */
    getSensorValuesForNHours: function (iHours) {
        var jsonData = $.cpmAppJsonData;
        if (!jsonData) {
            return null;
        }
        // bgHighLimit and bgLowLimit
        this.parsedData.bgHighLimit = jsonData['bgHighLimit'];
        this.parsedData.bgLowLimit = jsonData['bgLowLimit'];
        // 5 minutes is base time interval, it's 300000 in milliseconds
        var fiveMinMills = 300000;
        function newDate(value) {
            var field = value.match(/^([+-]?\d{4}(?!\d\d\b))(?:-?(?:(0[1-9]|1[0-2])(?:-?([12]\d|0[1-9]|3[01]))?)(?:[T\s](?:(?:([01]\d|2[0-3])(?::?([0-5]\d))?|24\:?00)([.,]\d+(?!:))?)?(?::?([0-5]\d)(?:[.,](\d+))?)?([zZ]|([+-](?:[01]\d|2[0-3])):?([0-5]\d)?)?)?)?$/) || [];
            var result = new Date(field[1], field[2] - 1 | 0, field[3] || 1, field[4] | 0, field[5] | 0, field[7] | 0, field[8] | 0);
            if (field[9]) {
                result.setUTCMinutes(result.getUTCMinutes() - result.getTimezoneOffset() - ((field[10] * 60 + +field[11]) || 0));
            }
            return result;
        }
        var lastTS = this.parsedData.lastSensorTS;
        var lastTSString = this.parsedData.lastSensorTSString;
        var lastTSIOSSupported = newDate(lastTSString).getTime();
        var oSensorData = this.parsedData.sgs;
        var oLimits = this.parsedData.limits;
        var oHighLimits = this.parsedData.highLimits;
        var oLowLimits = this.parsedData.lowLimits;
        var sgsLength = oSensorData.length;
        var iTimeRange = this.hoursToMsec(iHours);
        var limitsLength = oLimits.length;
        var highLimitsLength = oHighLimits.length;
        var lowLimitsLength = oLowLimits.length;
        var sensorValues = [];
        var timeChangeValues = [];
        var sensorLimitsTop = [];
        var sensorLimitsBottom = [];
        var sensorLimitsShade = [];
        var maxSensorTime = lastTSIOSSupported;
        var minSensorTime = maxSensorTime - iTimeRange;
        this.parsedData.lowGlucoseSuspends = [];
        for (idx in this.parsedData.unfilteredEventMarkers) {
            var marker = this.parsedData.unfilteredEventMarkers[idx];
            var ts = lastTSIOSSupported - (287 - marker.index) * fiveMinMills;
            /*alert('lastTS & marker.index: ' + lastTS + ' :: ' + marker.index);*/
            var thisdate = new Date(ts);
            /*alert('ts < minSensorTime: ' + (ts < minSensorTime) + ' ' + thisdate);*/
            if (ts < minSensorTime) {
                continue;
            }
            if (marker.type == 'LOW_GLUCOSE_SUSPENDED') {
                if (marker.deliverySuspended) {
                    marker.value = 400;
                }
                else {
                    marker.value = 0;
                }
                var eventMarker = [thisdate, marker.index, marker.value, marker.type];
                this.parsedData.lowGlucoseSuspends.push(eventMarker);
            }
        }
        var isPLGM = false;
        var pointsInHour = 12;
        var pointsToSlice = 0;
        var i = 0, j = 0, h = 0, l = 0, curTime, sensorData, timeChange;
        var lastGlucoseSuspended = false;
        //special condition when no limits comming from the supplied JSON - set the JSON to the same as 'no limits from pump'
        if (limitsLength == 0) {
            var jsonObj = '[{"index": 0,"highLimit": 0,"lowLimit": 0}]';
            oLimits = JSON.parse(jsonObj);
            limitsLength = 1;
        }
        j = limitsLength;
        //special condition when no limits is set on the pump. dummy limit 0 will be outside chart for mmol (starts at 2.2) and mgdl (starts at 40)
        if (limitsLength == 1 && oLimits[0].highLimit == 0 && oLimits[0].lowLimit == 0) {
            oLimits[0].highLimit = 0;
            oLimits[0].lowLimit = 0;
            // the regular limits array is empty, check to see if we're using plgm limits
            if (oHighLimits.length > 0 || oLowLimits.length > 0) {
                isPLGM = true;
                // if either high or low arrays are empty, we fill it with dummy data
                if (oHighLimits.length == 0) {
                    oHighLimits = [{ "index": 0, "highLimit": 2, "lowLimit": 0 }];
                }
                if (oLowLimits.length == 0) {
                    oLowLimits = [{ "index": 0, "highLimit": 0, "lowLimit": 1 }];
                }
            }
        }
        pointsToSlice = pointsInHour * iHours;
        var lowGlucoseMarkers = this.parsedData.lowGlucoseSuspends;
        var tempLGS = [];
        for (ii = lowGlucoseMarkers.length - 1; ii >= 0; ii--) {
            lowGlucoseMarkers[ii][1] = (sgsLength - 1) - lowGlucoseMarkers[ii][1];
            lowGlucoseMarkers[ii][2] = (lowGlucoseMarkers[ii][2] == 0 ? 400 : 0);
            tempLGS.push(lowGlucoseMarkers[ii]);
        }
        /*for (ii = 0; ii < tempLGS.length; ii++){
          console.log('@@@@@ ' + ii + ' : ' + tempLGS[ii][1]);
        }*/
        var lastVal = -1;
        do {
            curTime = maxSensorTime - (i * fiveMinMills);
            var date = new Date(curTime);
            sensorData = [date, this.getBGValue(oSensorData[sgsLength - 1 - i]['sg'])];
            if (sensorData[1] == 0
                || (this.parsedData.jsonBGUnits == 'MGDL' && (sensorData[1] < 40 || sensorData[1] > 400))
                || (this.parsedData.jsonBGUnits == 'MMOL_L' && (sensorData[1] < 2.2 || sensorData[1] > 22.2))) {
                if (oSensorData[sgsLength - 1 - i]['sensorState'] == 'SG_BELOW_40_MGDL') {
                    if (this.parsedData.jsonBGUnits == 'MGDL' && !sensorData[1] || sensorData[1] == null || sensorData[1] == undefined) {
                        sensorData[1] = 40;
                    }
                    else if (this.parsedData.jsonBGUnits == 'MMOL_L' && !sensorData[1] || sensorData[1] == null || sensorData[1] == undefined) {
                        sensorData[1] = 2.2;
                    }
                }
                else if (oSensorData[sgsLength - 1 - i]['sensorState'] == 'SG_ABOVE_400_MGDL') {
                    if (this.parsedData.jsonBGUnits == 'MGDL' && !sensorData[1] || sensorData[1] == null || sensorData[1] == undefined) {
                        sensorData[1] = 400;
                    }
                    else if (this.parsedData.jsonBGUnits == 'MMOL_L' && !sensorData[1] || sensorData[1] == null || sensorData[1] == undefined) {
                        sensorData[1] = 22.2;
                    }
                }
                else {
                    sensorData[1] = null; // for breaks in sensor trace
                }
            }
            sensorValues[i] = sensorData;
            // Time Change markers implementation, Setting value to -1000 to make it invisible in chart
            timeChange = [date, -10000];
            // Add a value to make it show up in the chart when there is a time change. the value also determines the postion on the y axis. 400 is top
            if (oSensorData[sgsLength - 1 - i]['timeChange'] == true) {
                timeChange[1] = [this.getBGValue(385.2)];
            }
            timeChangeValues[i] = timeChange;
            if (!isPLGM) {
                //Look for changes in limits for each index and increment if required
                if (j - 1 > 0 && (sgsLength - 1 - i < oLimits[j - 1].index)) {
                    j--;
                }
                // make the limit value series
                sensorLimitsTop[i] = [date, this.getBGValue(oLimits[j - 1].highLimit)];
                sensorLimitsBottom[i] = [date, this.getBGValue(oLimits[j - 1].lowLimit)];
            }
            else {
                // same as above, but we're using the high/low arrays
                if (h + 1 < highLimitsLength && i > oHighLimits[h + 1].index) {
                    h++;
                }
                if (l + 1 < lowLimitsLength && i > oLowLimits[l + 1].index) {
                    l++;
                }
                sensorLimitsTop[i] = [date, this.getBGValue(oHighLimits[h].limit)];
                sensorLimitsBottom[i] = [date, this.getBGValue(oLowLimits[l].limit)];
            }
            for (ii = 0; ii < tempLGS.length; ii++) {
                var currVal = tempLGS[ii][1]; //Math.round( / pointsToSlice);
                /*if (lastVal == currVal && sensorLimitsShade.length > currVal && currVal > 0) {
                  currVal = lastVal + 1;
                }*/
                if (tempLGS[ii][1] < 0) {
                    if (lastGlucoseSuspended) {
                        sensorLimitsShade[i] = [date, 400];
                    }
                    else {
                        sensorLimitsShade[i] = [date, 0];
                    }
                    continue;
                }
                if (lastVal >= currVal) {
                    currVal = lastVal + 1;
                }
                if (i == currVal) {
                    sensorLimitsShade[i] = [date, tempLGS[ii][2]];
                    lastGlucoseSuspended = tempLGS[ii][2] == 0 ? false : true;
                    tempLGS[ii][1] = -1;
                    lastVal = currVal;
                    break;
                }
                else {
                    if (lastGlucoseSuspended) {
                        sensorLimitsShade[i] = [date, 400];
                    }
                    else {
                        sensorLimitsShade[i] = [date, 0];
                    }
                }
            }
            i++;
        } while (i <= pointsToSlice && i < sgsLength);
        if (sensorLimitsShade != undefined) {
            for (ii = 0; ii < sensorLimitsShade.length; ii++) {
                if (sensorLimitsShade[ii] != undefined) {
                    /*console.log('##### ' + ii + ' : ' + sensorLimitsShade[ii][1]);*/
                }
            }
        }
        var k = 0;
        sensorLimitsBottom = this.formatLimitsForChart(sensorLimitsBottom);
        sensorLimitsTop = this.formatLimitsForChart(sensorLimitsTop);
        sensorLimitsShade = this.formatLimitsForChart(sensorLimitsShade);
        this.parsedData.sensorValues = {
            values: sensorValues,
            timeChanges: timeChangeValues,
            limitsBottom: sensorLimitsBottom,
            limitsTop: sensorLimitsTop,
            limitsShade: sensorLimitsShade
        };
        // Event Markers
        var baseMaxTime = lastTSIOSSupported;
        var eventMarkerValues = [];
        var eventMarker;
        for (idx in this.parsedData.unfilteredEventMarkers) {
            var marker = this.parsedData.unfilteredEventMarkers[idx];
            if (marker.index > 287 && marker.type != 'LOW_GLUCOSE_SUSPENDED') {
                continue;
            }
            var ts = baseMaxTime - (287 - marker.index) * fiveMinMills;
            var thisdate = new Date(ts);
            if (ts < minSensorTime) {
                continue;
            }
            //max sensor value = 385.2
            //sgValue at the marker index
            var sgValue;
            var previousDateTime;
            switch (marker.type) {
                case 'OTHER':
                case 'MEAL':
                    sgValue = 67;
                    break;
                case 'LOW_GLUCOSE_SUSPENDED':
                    continue;
                case 'EXERCISE':
                case 'INSULIN':
                    sgValue = 385.2;
                    break;
                case 'BG_READING':
                    if (marker.value > 385.2) {
                        sgValue = 385.2;
                    }
                    else if (marker.value < 41.0) {
                        sgValue = 41.0;
                    }
                    else {
                        sgValue = marker.value;
                    }
                    break;
                case 'CALIBRATION':
                    if (marker.value > 385.2) {
                        sgValue = 385.2;
                    }
                    else if (marker.value < 41.0) {
                        sgValue = 41.0;
                    }
                    else {
                        sgValue = marker.value;
                    }
                    break;
                /*Change implemented by Zimetrics*/
                /*FG20-FSG10-FR10-TR10-SS1 - Implementation for Time Change Event Marker*/
                case 'TIME_CHANGE':
                    sgValue = 385.2;
                    break;
                default: '';
            }
            eventMarker = [thisdate, this.getBGValue(sgValue), marker.type];
            eventMarker['type'] = marker.type;
            eventMarkerValues.push(eventMarker);
        }
        this.parsedData.eventMarkers = eventMarkerValues;
        return this.parsedData.sensorValues;
    },
    /**
     * Force the display of straight vertical steps on chart limit lines by
     * adding some extra values.
     */
    formatLimitsForChart: function (aLimitsData) {
        if (aLimitsData.length > 0) {
            var fl = true, i = 1, tmp;
            while (fl) {
                if (aLimitsData[i - 1][1] != aLimitsData[i][1]) {
                    tmp = [aLimitsData[i - 1][0], aLimitsData[i][1]];
                    aLimitsData.splice(i, 0, tmp);
                    i += 1;
                }
                i++;
                if (i > aLimitsData.length - 1) {
                    fl = false;
                }
            }
            var len = aLimitsData.length;
            // If limit value is off, it's equal to 0. In this case, don't display
            // the limit line and connecting line by setting its value to null.
            for (i = 0; i < len; i++) {
                if (aLimitsData[i][1] == 0) {
                    aLimitsData[i][1] = null;
                }
            }
        }
        return aLimitsData;
    },
    /**
     * Convert hours to milliseconds.
     * @param iHours {Number} Number of hours to be presented as milliseconds.
     * @returns {Number} Number of milliseconds.
     */
    hoursToMsec: function (iHours) {
        var iMsecInHour = 60 * 60 * 1000;
        return iHours * iMsecInHour;
    },
    /**
     * Convert minutes to days.
     * @param iMinutes {Number} Number of minutes to be presented as hours.
     */
    minutesToDays: function (iMinutes) {
        var iMinsInDay = 60 * 24;
        return Math.floor(iMinutes / iMinsInDay);
    },
    /**
     * Convert hours to days.
     * @param iHours {Number} Number of hours to be presented as days.
     * @returns {Number} Number of days.
     */
    hoursToDays: function (iHours) {
        if (iHours == 255) {
            return 255;
        }
        var iHoursInDay = 24;
        return Math.floor(iHours / iHoursInDay);
    },
    sensorHoursToDays: function (iHours) {
        if (iHours == 255) {
            return 255;
        }
        var iHoursInDay = 24;
        return Math.ceil(iHours / iHoursInDay);
    },
    /* Convert displayed BG values into mmol/L when the unit chosen is mmol/L
     *
     * Formula is 1 mg/dL = 1/18.016 mmol/L
     **/
    mgDlToMmol: function (mgDl) {
        var mmol = mgDl / 18.016;
        return mmol;
    },
    /* Support the mmol/dL display in connect monitor.
     * @param valueInMgDl {Number} Original BG value as it parsed from JSON data.
     * @param roundTo {Number} If needed, converted value may be rounded to needed number of decimals.
     * @returns {Number} Value in mmol/L.
     **/
    getBGValue: function (valueInMgDl, roundTo) {
        if (!roundTo) {
            roundTo = 1;
        }
        var value = valueInMgDl;
        var r = Math.pow(10, roundTo);
        //ensure that value is not MGDL before coverting
        if (this.parsedData.jsonBGUnits != 'MGDL') {
            // convert to mmol
            value = Math.round(this.mgDlToMmol(valueInMgDl) * r) / r;
            //round as required, keep trailing zero
            value = value.toFixed(roundTo);
        }
        else {
            //MGDL needs no trailing zeros, strip that out
            if (value !== undefined) {
                value = parseFloat(value.toFixed(roundTo));
            }
        }
        return value;
    },
    /* Add the utcOffsetMs to tsMs.
     * @param tsMs the timestamp in millis
     * @param utcOffsetMs the utc offset in millis
     * @return sum of tsMs and utcsOffsetMs
     */
    toUTC: function (tsMs, utcOffsetMs) {
        return tsMs + utcOffsetMs;
    },
    /**
     * Return the given dateObj in MM/DD/YY format as string.
     * @param {Date} dateObj Date object to be presented.
     */
    getDateString: function (dateObj) {
        var month = dateObj.getMonth() + 1;
        return month + '/' + dateObj.getDate() + '/' + String(dateObj.getFullYear()).substr(2, 4);
    },
    /**
     * Return the given dateObj in MMM DD, YYYY format as string.
     * Month names are localized.
     * @param {Date} dateObj Date object to be presented.
     */
    getLongerDateString: function (dateObj) {
        var monthes = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return this.res(monthes[dateObj.getMonth()]) + ' ' + dateObj.getDate();
    },
    /**
     * Return the given dateObj in HH:MM AM/PM format as string.
     * @param {Date} dateObj Date object to be presented
     */
    getTimeString: function (dateObj) {
        var result = '';
        var hours = dateObj.getHours();
        var minutes = dateObj.getMinutes();
        minutes = minutes < 10 ? '0' + minutes : minutes;
        // Render date to 24hr format
        if (this.parsedData.timeFormat == 'HR_24') {
            result = hours + ':' + minutes;
        }
        // Render date to 12hr format
        if (this.parsedData.timeFormat == 'HR_12') {
            var amPm = hours >= 12 ? this.res('PM') : this.res('AM');
            hours = hours % 12;
            hours = hours ? hours : 12;
            result = hours + ':' + minutes + ' ' + amPm;
        }
        return result;
    },
    /**
     * Start resources localization by creating the instance of CPMStrings class,
     * which in turn starts loading of the localized resources from XML files.
     * Add onResourcesLocalized callback as success handler.
     */
    localizeResources: function (translations) {
        this.resources.localizedStrings = translations.monitorStrings;
        this.alarmCodes = translations.errorStrings;
    },
    localizeMappingResources: function (mapFaultIDs) {
        if (mapFaultIDs) {
            this.mappings = mapFaultIDs.alarmCodesMapping;
        }
    },
    /**
     * @param {Object} localizedString Object handling all localized strings
     * loaded and parsed from XML language resources file.
     */
    onResourcesLocalized: function (localizedStrings) {
        $.cpmApp.stringsLocalized = true;
        $.cpmApp.resources.localizedStrings = localizedStrings;
        $.cpmApp.updateDisplay();
    },
    /**
     * Return the localized resource string by its resourceId.
     * @param {String} resourceId The resource ID to get the localized string for.
     */
    res: function (resourceId) {
        return this.resources.localizedStrings[resourceId] || '!' + resourceId;
    },
    getAlarmByCode: function (lastAlarmCode) {
        if (this.alarmCodes[lastAlarmCode]) {
            return this.alarmCodes[lastAlarmCode];
        }
        else {
            return "-1"; // this alarm is not supported
        }
    },
    // Flag set to true when localization is loaded and parsed already
    stringsLocalized: false,
    //All loaded JSON data is stored as the fields of the parsedData object.
    parsedData: {
        firstname: '',
        surname: '',
        sUpdatedDate: '',
        sUpdatedTime: ''
    },
    // Localized resources will be stored as fields of the resources object.
    resources: {},
    // Some predefined types of application errors to be shown to the user.
    errorType: {
        none: 'NONE',
        jsonError: 'JSON Error'
    },
    // Basic application settings are stored as fields of this.s object;
    global: {
        ignoreJsonErrors: false,
        jsonDataUri: locationPath + '://' + document.domain + ':' + location.port + '/patient/connect/ConnectViewerServlet',
        loginUri: locationPath + '://' + document.domain + ':' + location.port + '/app/login',
        logoutUri: locationPath + '://' + document.domain + ':' + location.port + '/app/logout',
        jsonDataUriDebug: 'resources/last24hours',
        fiveMinutes: 300000,
        oneMinute: 60000,
        iUpdateInterval: 300000,
        iSessionTimeOut: 60,
        bItinitialized: false,
        oChartData: null,
        iHoursSelected: 3,
        oSelectedRangeButton: null,
        screenWidth: $(window).width(),
        screenHeight: $(window).height(),
        isDebugMode: false,
        updateIntervalAligned: false,
        debugFileCounter: 0,
        debugFileCounterMax: 20,
        showUnrecognizedErrors: false
    }
});
